// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: identity/admin/admin.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Depot_Devtools_Auth_V0_Identity_Admin_ClientType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unset // = 0
  case clientFirstParty // = 1
  case clientThirdParty // = 2
  case clientSystemParty // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unset
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unset
    case 1: self = .clientFirstParty
    case 2: self = .clientThirdParty
    case 3: self = .clientSystemParty
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unset: return 0
    case .clientFirstParty: return 1
    case .clientThirdParty: return 2
    case .clientSystemParty: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Depot_Devtools_Auth_V0_Identity_Admin_ClientType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Depot_Devtools_Auth_V0_Identity_Admin_ClientType] = [
    .unset,
    .clientFirstParty,
    .clientThirdParty,
    .clientSystemParty,
  ]
}

#endif  // swift(>=4.2)

enum Depot_Devtools_Auth_V0_Identity_Admin_SubjectType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case `public` // = 0
  case pairwise // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .public
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .public
    case 1: self = .pairwise
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .public: return 0
    case .pairwise: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Depot_Devtools_Auth_V0_Identity_Admin_SubjectType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Depot_Devtools_Auth_V0_Identity_Admin_SubjectType] = [
    .public,
    .pairwise,
  ]
}

#endif  // swift(>=4.2)

enum Depot_Devtools_Auth_V0_Identity_Admin_TokenEndpointAuthMethod: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case clientSecretBasic // = 0
  case clientSecretPost // = 1
  case privateKeyJwt // = 2
  case none // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .clientSecretBasic
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .clientSecretBasic
    case 1: self = .clientSecretPost
    case 2: self = .privateKeyJwt
    case 3: self = .none
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .clientSecretBasic: return 0
    case .clientSecretPost: return 1
    case .privateKeyJwt: return 2
    case .none: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Depot_Devtools_Auth_V0_Identity_Admin_TokenEndpointAuthMethod: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Depot_Devtools_Auth_V0_Identity_Admin_TokenEndpointAuthMethod] = [
    .clientSecretBasic,
    .clientSecretPost,
    .privateKeyJwt,
    .none,
  ]
}

#endif  // swift(>=4.2)

enum Depot_Devtools_Auth_V0_Identity_Admin_TokenEndpointAuthSigningAlg: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unset // = 0
  case rs256 // = 1
  case rs384 // = 2
  case rs512 // = 3
  case ps256 // = 4
  case ps384 // = 5
  case ps512 // = 6
  case es256 // = 7
  case es384 // = 8
  case es512 // = 9
  case UNRECOGNIZED(Int)

  init() {
    self = .unset
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unset
    case 1: self = .rs256
    case 2: self = .rs384
    case 3: self = .rs512
    case 4: self = .ps256
    case 5: self = .ps384
    case 6: self = .ps512
    case 7: self = .es256
    case 8: self = .es384
    case 9: self = .es512
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unset: return 0
    case .rs256: return 1
    case .rs384: return 2
    case .rs512: return 3
    case .ps256: return 4
    case .ps384: return 5
    case .ps512: return 6
    case .es256: return 7
    case .es384: return 8
    case .es512: return 9
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Depot_Devtools_Auth_V0_Identity_Admin_TokenEndpointAuthSigningAlg: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Depot_Devtools_Auth_V0_Identity_Admin_TokenEndpointAuthSigningAlg] = [
    .unset,
    .rs256,
    .rs384,
    .rs512,
    .ps256,
    .ps384,
    .ps512,
    .es256,
    .es384,
    .es512,
  ]
}

#endif  // swift(>=4.2)

enum Depot_Devtools_Auth_V0_Identity_Admin_GrantType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unset // = 0
  case clientCredentials // = 1
  case authorizationCode // = 2
  case implicit // = 3
  case refreshToken // = 4
  case deviceCode // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .unset
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unset
    case 1: self = .clientCredentials
    case 2: self = .authorizationCode
    case 3: self = .implicit
    case 4: self = .refreshToken
    case 5: self = .deviceCode
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unset: return 0
    case .clientCredentials: return 1
    case .authorizationCode: return 2
    case .implicit: return 3
    case .refreshToken: return 4
    case .deviceCode: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Depot_Devtools_Auth_V0_Identity_Admin_GrantType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Depot_Devtools_Auth_V0_Identity_Admin_GrantType] = [
    .unset,
    .clientCredentials,
    .authorizationCode,
    .implicit,
    .refreshToken,
    .deviceCode,
  ]
}

#endif  // swift(>=4.2)

enum Depot_Devtools_Auth_V0_Identity_Admin_ResponseType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unset // = 0
  case none // = 1
  case idToken // = 2
  case token // = 3
  case code // = 4
  case idTokenToken // = 5
  case codeIDToken // = 6
  case codeToken // = 7
  case codeIDTokenToken // = 8
  case UNRECOGNIZED(Int)

  init() {
    self = .unset
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unset
    case 1: self = .none
    case 2: self = .idToken
    case 3: self = .token
    case 4: self = .code
    case 5: self = .idTokenToken
    case 6: self = .codeIDToken
    case 7: self = .codeToken
    case 8: self = .codeIDTokenToken
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unset: return 0
    case .none: return 1
    case .idToken: return 2
    case .token: return 3
    case .code: return 4
    case .idTokenToken: return 5
    case .codeIDToken: return 6
    case .codeToken: return 7
    case .codeIDTokenToken: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Depot_Devtools_Auth_V0_Identity_Admin_ResponseType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Depot_Devtools_Auth_V0_Identity_Admin_ResponseType] = [
    .unset,
    .none,
    .idToken,
    .token,
    .code,
    .idTokenToken,
    .codeIDToken,
    .codeToken,
    .codeIDTokenToken,
  ]
}

#endif  // swift(>=4.2)

enum Depot_Devtools_Auth_V0_Identity_Admin_RequestObjectSigningAlg: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unset // = 0
  case none // = 1
  case rs256 // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unset
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unset
    case 1: self = .none
    case 2: self = .rs256
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unset: return 0
    case .none: return 1
    case .rs256: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Depot_Devtools_Auth_V0_Identity_Admin_RequestObjectSigningAlg: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Depot_Devtools_Auth_V0_Identity_Admin_RequestObjectSigningAlg] = [
    .unset,
    .none,
    .rs256,
  ]
}

#endif  // swift(>=4.2)

enum Depot_Devtools_Auth_V0_Identity_Admin_UserinfoSignedResponseAlg: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unset // = 0
  case none // = 1
  case rs256 // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unset
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unset
    case 1: self = .none
    case 2: self = .rs256
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unset: return 0
    case .none: return 1
    case .rs256: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Depot_Devtools_Auth_V0_Identity_Admin_UserinfoSignedResponseAlg: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Depot_Devtools_Auth_V0_Identity_Admin_UserinfoSignedResponseAlg] = [
    .unset,
    .none,
    .rs256,
  ]
}

#endif  // swift(>=4.2)

struct Depot_Devtools_Auth_V0_Identity_Admin_CreateIdentityRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _data ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var connectionID: String = String()

  var schemaID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _data: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

struct Depot_Devtools_Auth_V0_Identity_Admin_CreateIdentityResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identityID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identities: [Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesResponse.Identity] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Lock: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unlocked // = 0
    case adminLocked // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .unlocked
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unlocked
      case 1: self = .adminLocked
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unlocked: return 0
      case .adminLocked: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  struct Identity {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var identityID: String = String()

    var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_createdAt = newValue}
    }
    /// Returns true if `createdAt` has been explicitly set.
    var hasCreatedAt: Bool {return self._createdAt != nil}
    /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
    mutating func clearCreatedAt() {self._createdAt = nil}

    var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_updatedAt = newValue}
    }
    /// Returns true if `updatedAt` has been explicitly set.
    var hasUpdatedAt: Bool {return self._updatedAt != nil}
    /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
    mutating func clearUpdatedAt() {self._updatedAt = nil}

    var mainIdentifier: String = String()

    var schemaID: String = String()

    var lock: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesResponse.Lock = .unlocked

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  init() {}
}

#if swift(>=4.2)

extension Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesResponse.Lock: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesResponse.Lock] = [
    .unlocked,
    .adminLocked,
  ]
}

#endif  // swift(>=4.2)

struct Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identityID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identityID: String = String()

  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {self._createdAt = nil}

  var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  var hasUpdatedAt: Bool {return self._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedAt() {self._updatedAt = nil}

  var mainIdentifier: String = String()

  var traitsID: String = String()

  var addressesIds: [String] = []

  var credentialsIds: Dictionary<String,String> = [:]

  var schemaID: String = String()

  var lock: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityResponse.Lock = .unlocked

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Lock: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unlocked // = 0
    case adminLocked // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .unlocked
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unlocked
      case 1: self = .adminLocked
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unlocked: return 0
      case .adminLocked: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityResponse.Lock: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityResponse.Lock] = [
    .unlocked,
    .adminLocked,
  ]
}

#endif  // swift(>=4.2)

struct Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesByAttributeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var attribute: String = String()

  var value: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesByAttributeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identities: [Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesByAttributeResponse.Identity] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Identity {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var identityID: String = String()

    var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_createdAt = newValue}
    }
    /// Returns true if `createdAt` has been explicitly set.
    var hasCreatedAt: Bool {return self._createdAt != nil}
    /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
    mutating func clearCreatedAt() {self._createdAt = nil}

    var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_updatedAt = newValue}
    }
    /// Returns true if `updatedAt` has been explicitly set.
    var hasUpdatedAt: Bool {return self._updatedAt != nil}
    /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
    mutating func clearUpdatedAt() {self._updatedAt = nil}

    var mainIdentifier: String = String()

    var traitsID: String = String()

    var addressesIds: [String] = []

    var credentialsIds: Dictionary<String,String> = [:]

    var schemaID: String = String()

    var lock: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesByAttributeResponse.Identity.Lock = .unlocked

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum Lock: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case unlocked // = 0
      case adminLocked // = 1
      case UNRECOGNIZED(Int)

      init() {
        self = .unlocked
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unlocked
        case 1: self = .adminLocked
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .unlocked: return 0
        case .adminLocked: return 1
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    init() {}

    fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  init() {}
}

#if swift(>=4.2)

extension Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesByAttributeResponse.Identity.Lock: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesByAttributeResponse.Identity.Lock] = [
    .unlocked,
    .adminLocked,
  ]
}

#endif  // swift(>=4.2)

struct Depot_Devtools_Auth_V0_Identity_Admin_UpdateIdentityRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identityID: String = String()

  var lock: Depot_Devtools_Auth_V0_Identity_Admin_UpdateIdentityRequest.Lock = .unlocked

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Lock: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unlocked // = 0
    case adminLocked // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .unlocked
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unlocked
      case 1: self = .adminLocked
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unlocked: return 0
      case .adminLocked: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateIdentityRequest.Lock: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Depot_Devtools_Auth_V0_Identity_Admin_UpdateIdentityRequest.Lock] = [
    .unlocked,
    .adminLocked,
  ]
}

#endif  // swift(>=4.2)

struct Depot_Devtools_Auth_V0_Identity_Admin_UpdateIdentityResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_DeleteIdentityRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identityID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_DeleteIdentityResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetCredentialsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identityID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetCredentialsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var credentials: Dictionary<String,Depot_Devtools_Auth_V0_Identity_Admin_GetCredentialsResponse.Credential> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Credential {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var credentialID: String = String()

    var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_createdAt = newValue}
    }
    /// Returns true if `createdAt` has been explicitly set.
    var hasCreatedAt: Bool {return self._createdAt != nil}
    /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
    mutating func clearCreatedAt() {self._createdAt = nil}

    var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_updatedAt = newValue}
    }
    /// Returns true if `updatedAt` has been explicitly set.
    var hasUpdatedAt: Bool {return self._updatedAt != nil}
    /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
    mutating func clearUpdatedAt() {self._updatedAt = nil}

    var identityID: String = String()

    var type: Int32 = 0

    var name: String = String()

    var configured: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_UpdateCredentialRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _data ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var connectionID: String = String()

  var identityID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _data: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

struct Depot_Devtools_Auth_V0_Identity_Admin_UpdateCredentialResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_CreateConnectionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var clientID: String = String()

  var clientSecret: String = String()

  var buttonImageURL: String = String()

  var provider: Depot_Devtools_Auth_V0_Identity_Admin_CreateConnectionRequest.Providers = .none

  var oidcDiscoveryURL: String = String()

  var mfa: [String] = []

  var type: Depot_Devtools_Auth_V0_Identity_Admin_CreateConnectionRequest.Types = .unset

  var scopes: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Providers: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case none // = 0
    case openid // = 1
    case amazon // = 2
    case bitbucket // = 3
    case box // = 4
    case dailymotion // = 5
    case deezer // = 6
    case digitalocean // = 7
    case discord // = 8
    case dropbox // = 9
    case eveonline // = 10
    case facebook // = 11
    case fitbit // = 12
    case gitea // = 13
    case github // = 14
    case gitlab // = 15
    case google // = 16
    case shopify // = 18
    case soundcloud // = 19
    case spotify // = 20
    case steam // = 21
    case stripe // = 22
    case twitch // = 23
    case uber // = 24
    case wepay // = 25
    case yahoo // = 26
    case yammer // = 27
    case heroku // = 28
    case instagram // = 29
    case intercom // = 30
    case kakao // = 31
    case lastfm // = 32
    case linkedin // = 33
    case line // = 34
    case onedrive // = 35
    case azuread // = 36
    case microsoftonline // = 37
    case battlenet // = 38
    case paypal // = 39
    case twitter // = 40
    case salesforce // = 41
    case typetalk // = 42
    case slack // = 43
    case meetup // = 44
    case xero // = 46
    case vk // = 47
    case naver // = 48
    case yandex // = 49
    case nextcloud // = 50
    case apple // = 52
    case strava // = 53
    case UNRECOGNIZED(Int)

    init() {
      self = .none
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .openid
      case 2: self = .amazon
      case 3: self = .bitbucket
      case 4: self = .box
      case 5: self = .dailymotion
      case 6: self = .deezer
      case 7: self = .digitalocean
      case 8: self = .discord
      case 9: self = .dropbox
      case 10: self = .eveonline
      case 11: self = .facebook
      case 12: self = .fitbit
      case 13: self = .gitea
      case 14: self = .github
      case 15: self = .gitlab
      case 16: self = .google
      case 18: self = .shopify
      case 19: self = .soundcloud
      case 20: self = .spotify
      case 21: self = .steam
      case 22: self = .stripe
      case 23: self = .twitch
      case 24: self = .uber
      case 25: self = .wepay
      case 26: self = .yahoo
      case 27: self = .yammer
      case 28: self = .heroku
      case 29: self = .instagram
      case 30: self = .intercom
      case 31: self = .kakao
      case 32: self = .lastfm
      case 33: self = .linkedin
      case 34: self = .line
      case 35: self = .onedrive
      case 36: self = .azuread
      case 37: self = .microsoftonline
      case 38: self = .battlenet
      case 39: self = .paypal
      case 40: self = .twitter
      case 41: self = .salesforce
      case 42: self = .typetalk
      case 43: self = .slack
      case 44: self = .meetup
      case 46: self = .xero
      case 47: self = .vk
      case 48: self = .naver
      case 49: self = .yandex
      case 50: self = .nextcloud
      case 52: self = .apple
      case 53: self = .strava
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .none: return 0
      case .openid: return 1
      case .amazon: return 2
      case .bitbucket: return 3
      case .box: return 4
      case .dailymotion: return 5
      case .deezer: return 6
      case .digitalocean: return 7
      case .discord: return 8
      case .dropbox: return 9
      case .eveonline: return 10
      case .facebook: return 11
      case .fitbit: return 12
      case .gitea: return 13
      case .github: return 14
      case .gitlab: return 15
      case .google: return 16
      case .shopify: return 18
      case .soundcloud: return 19
      case .spotify: return 20
      case .steam: return 21
      case .stripe: return 22
      case .twitch: return 23
      case .uber: return 24
      case .wepay: return 25
      case .yahoo: return 26
      case .yammer: return 27
      case .heroku: return 28
      case .instagram: return 29
      case .intercom: return 30
      case .kakao: return 31
      case .lastfm: return 32
      case .linkedin: return 33
      case .line: return 34
      case .onedrive: return 35
      case .azuread: return 36
      case .microsoftonline: return 37
      case .battlenet: return 38
      case .paypal: return 39
      case .twitter: return 40
      case .salesforce: return 41
      case .typetalk: return 42
      case .slack: return 43
      case .meetup: return 44
      case .xero: return 46
      case .vk: return 47
      case .naver: return 48
      case .yandex: return 49
      case .nextcloud: return 50
      case .apple: return 52
      case .strava: return 53
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum Types: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unset // = 0
    case password // = 1
    case otp // = 2
    case totp // = 3
    case oidc // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .unset
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .password
      case 2: self = .otp
      case 3: self = .totp
      case 4: self = .oidc
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unset: return 0
      case .password: return 1
      case .otp: return 2
      case .totp: return 3
      case .oidc: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Depot_Devtools_Auth_V0_Identity_Admin_CreateConnectionRequest.Providers: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Depot_Devtools_Auth_V0_Identity_Admin_CreateConnectionRequest.Providers] = [
    .none,
    .openid,
    .amazon,
    .bitbucket,
    .box,
    .dailymotion,
    .deezer,
    .digitalocean,
    .discord,
    .dropbox,
    .eveonline,
    .facebook,
    .fitbit,
    .gitea,
    .github,
    .gitlab,
    .google,
    .shopify,
    .soundcloud,
    .spotify,
    .steam,
    .stripe,
    .twitch,
    .uber,
    .wepay,
    .yahoo,
    .yammer,
    .heroku,
    .instagram,
    .intercom,
    .kakao,
    .lastfm,
    .linkedin,
    .line,
    .onedrive,
    .azuread,
    .microsoftonline,
    .battlenet,
    .paypal,
    .twitter,
    .salesforce,
    .typetalk,
    .slack,
    .meetup,
    .xero,
    .vk,
    .naver,
    .yandex,
    .nextcloud,
    .apple,
    .strava,
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_CreateConnectionRequest.Types: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Depot_Devtools_Auth_V0_Identity_Admin_CreateConnectionRequest.Types] = [
    .unset,
    .password,
    .otp,
    .totp,
    .oidc,
  ]
}

#endif  // swift(>=4.2)

struct Depot_Devtools_Auth_V0_Identity_Admin_CreateConnectionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var connections: [Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsResponse.Connection] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Providers: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case none // = 0
    case openid // = 1
    case amazon // = 2
    case bitbucket // = 3
    case box // = 4
    case dailymotion // = 5
    case deezer // = 6
    case digitalocean // = 7
    case discord // = 8
    case dropbox // = 9
    case eveonline // = 10
    case facebook // = 11
    case fitbit // = 12
    case gitea // = 13
    case github // = 14
    case gitlab // = 15
    case google // = 16
    case shopify // = 18
    case soundcloud // = 19
    case spotify // = 20
    case steam // = 21
    case stripe // = 22
    case twitch // = 23
    case uber // = 24
    case wepay // = 25
    case yahoo // = 26
    case yammer // = 27
    case heroku // = 28
    case instagram // = 29
    case intercom // = 30
    case kakao // = 31
    case lastfm // = 32
    case linkedin // = 33
    case line // = 34
    case onedrive // = 35
    case azuread // = 36
    case microsoftonline // = 37
    case battlenet // = 38
    case paypal // = 39
    case twitter // = 40
    case salesforce // = 41
    case typetalk // = 42
    case slack // = 43
    case meetup // = 44
    case xero // = 46
    case vk // = 47
    case naver // = 48
    case yandex // = 49
    case nextcloud // = 50
    case apple // = 52
    case strava // = 53
    case UNRECOGNIZED(Int)

    init() {
      self = .none
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .openid
      case 2: self = .amazon
      case 3: self = .bitbucket
      case 4: self = .box
      case 5: self = .dailymotion
      case 6: self = .deezer
      case 7: self = .digitalocean
      case 8: self = .discord
      case 9: self = .dropbox
      case 10: self = .eveonline
      case 11: self = .facebook
      case 12: self = .fitbit
      case 13: self = .gitea
      case 14: self = .github
      case 15: self = .gitlab
      case 16: self = .google
      case 18: self = .shopify
      case 19: self = .soundcloud
      case 20: self = .spotify
      case 21: self = .steam
      case 22: self = .stripe
      case 23: self = .twitch
      case 24: self = .uber
      case 25: self = .wepay
      case 26: self = .yahoo
      case 27: self = .yammer
      case 28: self = .heroku
      case 29: self = .instagram
      case 30: self = .intercom
      case 31: self = .kakao
      case 32: self = .lastfm
      case 33: self = .linkedin
      case 34: self = .line
      case 35: self = .onedrive
      case 36: self = .azuread
      case 37: self = .microsoftonline
      case 38: self = .battlenet
      case 39: self = .paypal
      case 40: self = .twitter
      case 41: self = .salesforce
      case 42: self = .typetalk
      case 43: self = .slack
      case 44: self = .meetup
      case 46: self = .xero
      case 47: self = .vk
      case 48: self = .naver
      case 49: self = .yandex
      case 50: self = .nextcloud
      case 52: self = .apple
      case 53: self = .strava
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .none: return 0
      case .openid: return 1
      case .amazon: return 2
      case .bitbucket: return 3
      case .box: return 4
      case .dailymotion: return 5
      case .deezer: return 6
      case .digitalocean: return 7
      case .discord: return 8
      case .dropbox: return 9
      case .eveonline: return 10
      case .facebook: return 11
      case .fitbit: return 12
      case .gitea: return 13
      case .github: return 14
      case .gitlab: return 15
      case .google: return 16
      case .shopify: return 18
      case .soundcloud: return 19
      case .spotify: return 20
      case .steam: return 21
      case .stripe: return 22
      case .twitch: return 23
      case .uber: return 24
      case .wepay: return 25
      case .yahoo: return 26
      case .yammer: return 27
      case .heroku: return 28
      case .instagram: return 29
      case .intercom: return 30
      case .kakao: return 31
      case .lastfm: return 32
      case .linkedin: return 33
      case .line: return 34
      case .onedrive: return 35
      case .azuread: return 36
      case .microsoftonline: return 37
      case .battlenet: return 38
      case .paypal: return 39
      case .twitter: return 40
      case .salesforce: return 41
      case .typetalk: return 42
      case .slack: return 43
      case .meetup: return 44
      case .xero: return 46
      case .vk: return 47
      case .naver: return 48
      case .yandex: return 49
      case .nextcloud: return 50
      case .apple: return 52
      case .strava: return 53
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum Types: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unset // = 0
    case password // = 1
    case otp // = 2
    case totp // = 3
    case oidc // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .unset
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .password
      case 2: self = .otp
      case 3: self = .totp
      case 4: self = .oidc
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unset: return 0
      case .password: return 1
      case .otp: return 2
      case .totp: return 3
      case .oidc: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum Purposes: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case purposeUnknown // = 0
    case purposeMainFactor // = 1
    case econdFactor // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .purposeUnknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .purposeUnknown
      case 1: self = .purposeMainFactor
      case 2: self = .econdFactor
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .purposeUnknown: return 0
      case .purposeMainFactor: return 1
      case .econdFactor: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  struct Connection {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var name: String = String()

    var clientID: String = String()

    var clientSecret: String = String()

    var buttonImageURL: String = String()

    var provider: Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsResponse.Providers = .none

    var oidcDiscoveryURL: String = String()

    var mfa: [String] = []

    var type: Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsResponse.Types = .unset

    var id: String = String()

    var scopes: String = String()

    var purpose: Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsResponse.Purposes = .purposeUnknown

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

#if swift(>=4.2)

extension Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsResponse.Providers: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsResponse.Providers] = [
    .none,
    .openid,
    .amazon,
    .bitbucket,
    .box,
    .dailymotion,
    .deezer,
    .digitalocean,
    .discord,
    .dropbox,
    .eveonline,
    .facebook,
    .fitbit,
    .gitea,
    .github,
    .gitlab,
    .google,
    .shopify,
    .soundcloud,
    .spotify,
    .steam,
    .stripe,
    .twitch,
    .uber,
    .wepay,
    .yahoo,
    .yammer,
    .heroku,
    .instagram,
    .intercom,
    .kakao,
    .lastfm,
    .linkedin,
    .line,
    .onedrive,
    .azuread,
    .microsoftonline,
    .battlenet,
    .paypal,
    .twitter,
    .salesforce,
    .typetalk,
    .slack,
    .meetup,
    .xero,
    .vk,
    .naver,
    .yandex,
    .nextcloud,
    .apple,
    .strava,
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsResponse.Types: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsResponse.Types] = [
    .unset,
    .password,
    .otp,
    .totp,
    .oidc,
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsResponse.Purposes: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsResponse.Purposes] = [
    .purposeUnknown,
    .purposeMainFactor,
    .econdFactor,
  ]
}

#endif  // swift(>=4.2)

struct Depot_Devtools_Auth_V0_Identity_Admin_UpdateConnectionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var clientID: String = String()

  var clientSecret: String = String()

  var buttonImageURL: String = String()

  var provider: Depot_Devtools_Auth_V0_Identity_Admin_UpdateConnectionRequest.Providers = .none

  var oidcDiscoveryURL: String = String()

  var mfa: [String] = []

  var type: Depot_Devtools_Auth_V0_Identity_Admin_UpdateConnectionRequest.Types = .unset

  var id: String = String()

  var scopes: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Providers: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case none // = 0
    case openid // = 1
    case amazon // = 2
    case bitbucket // = 3
    case box // = 4
    case dailymotion // = 5
    case deezer // = 6
    case digitalocean // = 7
    case discord // = 8
    case dropbox // = 9
    case eveonline // = 10
    case facebook // = 11
    case fitbit // = 12
    case gitea // = 13
    case github // = 14
    case gitlab // = 15
    case google // = 16
    case shopify // = 18
    case soundcloud // = 19
    case spotify // = 20
    case steam // = 21
    case stripe // = 22
    case twitch // = 23
    case uber // = 24
    case wepay // = 25
    case yahoo // = 26
    case yammer // = 27
    case heroku // = 28
    case instagram // = 29
    case intercom // = 30
    case kakao // = 31
    case lastfm // = 32
    case linkedin // = 33
    case line // = 34
    case onedrive // = 35
    case azuread // = 36
    case microsoftonline // = 37
    case battlenet // = 38
    case paypal // = 39
    case twitter // = 40
    case salesforce // = 41
    case typetalk // = 42
    case slack // = 43
    case meetup // = 44
    case xero // = 46
    case vk // = 47
    case naver // = 48
    case yandex // = 49
    case nextcloud // = 50
    case apple // = 52
    case strava // = 53
    case UNRECOGNIZED(Int)

    init() {
      self = .none
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .openid
      case 2: self = .amazon
      case 3: self = .bitbucket
      case 4: self = .box
      case 5: self = .dailymotion
      case 6: self = .deezer
      case 7: self = .digitalocean
      case 8: self = .discord
      case 9: self = .dropbox
      case 10: self = .eveonline
      case 11: self = .facebook
      case 12: self = .fitbit
      case 13: self = .gitea
      case 14: self = .github
      case 15: self = .gitlab
      case 16: self = .google
      case 18: self = .shopify
      case 19: self = .soundcloud
      case 20: self = .spotify
      case 21: self = .steam
      case 22: self = .stripe
      case 23: self = .twitch
      case 24: self = .uber
      case 25: self = .wepay
      case 26: self = .yahoo
      case 27: self = .yammer
      case 28: self = .heroku
      case 29: self = .instagram
      case 30: self = .intercom
      case 31: self = .kakao
      case 32: self = .lastfm
      case 33: self = .linkedin
      case 34: self = .line
      case 35: self = .onedrive
      case 36: self = .azuread
      case 37: self = .microsoftonline
      case 38: self = .battlenet
      case 39: self = .paypal
      case 40: self = .twitter
      case 41: self = .salesforce
      case 42: self = .typetalk
      case 43: self = .slack
      case 44: self = .meetup
      case 46: self = .xero
      case 47: self = .vk
      case 48: self = .naver
      case 49: self = .yandex
      case 50: self = .nextcloud
      case 52: self = .apple
      case 53: self = .strava
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .none: return 0
      case .openid: return 1
      case .amazon: return 2
      case .bitbucket: return 3
      case .box: return 4
      case .dailymotion: return 5
      case .deezer: return 6
      case .digitalocean: return 7
      case .discord: return 8
      case .dropbox: return 9
      case .eveonline: return 10
      case .facebook: return 11
      case .fitbit: return 12
      case .gitea: return 13
      case .github: return 14
      case .gitlab: return 15
      case .google: return 16
      case .shopify: return 18
      case .soundcloud: return 19
      case .spotify: return 20
      case .steam: return 21
      case .stripe: return 22
      case .twitch: return 23
      case .uber: return 24
      case .wepay: return 25
      case .yahoo: return 26
      case .yammer: return 27
      case .heroku: return 28
      case .instagram: return 29
      case .intercom: return 30
      case .kakao: return 31
      case .lastfm: return 32
      case .linkedin: return 33
      case .line: return 34
      case .onedrive: return 35
      case .azuread: return 36
      case .microsoftonline: return 37
      case .battlenet: return 38
      case .paypal: return 39
      case .twitter: return 40
      case .salesforce: return 41
      case .typetalk: return 42
      case .slack: return 43
      case .meetup: return 44
      case .xero: return 46
      case .vk: return 47
      case .naver: return 48
      case .yandex: return 49
      case .nextcloud: return 50
      case .apple: return 52
      case .strava: return 53
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum Types: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unset // = 0
    case password // = 1
    case otp // = 2
    case totp // = 3
    case oidc // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .unset
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .password
      case 2: self = .otp
      case 3: self = .totp
      case 4: self = .oidc
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unset: return 0
      case .password: return 1
      case .otp: return 2
      case .totp: return 3
      case .oidc: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateConnectionRequest.Providers: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Depot_Devtools_Auth_V0_Identity_Admin_UpdateConnectionRequest.Providers] = [
    .none,
    .openid,
    .amazon,
    .bitbucket,
    .box,
    .dailymotion,
    .deezer,
    .digitalocean,
    .discord,
    .dropbox,
    .eveonline,
    .facebook,
    .fitbit,
    .gitea,
    .github,
    .gitlab,
    .google,
    .shopify,
    .soundcloud,
    .spotify,
    .steam,
    .stripe,
    .twitch,
    .uber,
    .wepay,
    .yahoo,
    .yammer,
    .heroku,
    .instagram,
    .intercom,
    .kakao,
    .lastfm,
    .linkedin,
    .line,
    .onedrive,
    .azuread,
    .microsoftonline,
    .battlenet,
    .paypal,
    .twitter,
    .salesforce,
    .typetalk,
    .slack,
    .meetup,
    .xero,
    .vk,
    .naver,
    .yandex,
    .nextcloud,
    .apple,
    .strava,
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateConnectionRequest.Types: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Depot_Devtools_Auth_V0_Identity_Admin_UpdateConnectionRequest.Types] = [
    .unset,
    .password,
    .otp,
    .totp,
    .oidc,
  ]
}

#endif  // swift(>=4.2)

struct Depot_Devtools_Auth_V0_Identity_Admin_UpdateConnectionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_DeleteConnectionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_DeleteConnectionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetOAuth2ClientsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetOAuth2ClientsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clients: [Depot_Devtools_Auth_V0_Identity_Admin_GetOAuth2ClientsResponse.Client] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Client {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var allowedCorsOrigins: [String] {
      get {return _storage._allowedCorsOrigins}
      set {_uniqueStorage()._allowedCorsOrigins = newValue}
    }

    var audience: [String] {
      get {return _storage._audience}
      set {_uniqueStorage()._audience = newValue}
    }

    var backchannelLogoutSessionRequired: Bool {
      get {return _storage._backchannelLogoutSessionRequired}
      set {_uniqueStorage()._backchannelLogoutSessionRequired = newValue}
    }

    var backchannelLogoutUri: String {
      get {return _storage._backchannelLogoutUri}
      set {_uniqueStorage()._backchannelLogoutUri = newValue}
    }

    var clientID: String {
      get {return _storage._clientID}
      set {_uniqueStorage()._clientID = newValue}
    }

    var clientName: String {
      get {return _storage._clientName}
      set {_uniqueStorage()._clientName = newValue}
    }

    var clientSecretExpiresAt: Int64 {
      get {return _storage._clientSecretExpiresAt}
      set {_uniqueStorage()._clientSecretExpiresAt = newValue}
    }

    var clientUri: String {
      get {return _storage._clientUri}
      set {_uniqueStorage()._clientUri = newValue}
    }

    var contacts: [String] {
      get {return _storage._contacts}
      set {_uniqueStorage()._contacts = newValue}
    }

    var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._createdAt = newValue}
    }
    /// Returns true if `createdAt` has been explicitly set.
    var hasCreatedAt: Bool {return _storage._createdAt != nil}
    /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
    mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

    var frontchannelLogoutSessionRequired: Bool {
      get {return _storage._frontchannelLogoutSessionRequired}
      set {_uniqueStorage()._frontchannelLogoutSessionRequired = newValue}
    }

    var frontchannelLogoutUri: String {
      get {return _storage._frontchannelLogoutUri}
      set {_uniqueStorage()._frontchannelLogoutUri = newValue}
    }

    var grantTypes: [Depot_Devtools_Auth_V0_Identity_Admin_GrantType] {
      get {return _storage._grantTypes}
      set {_uniqueStorage()._grantTypes = newValue}
    }

    var jwks: SwiftProtobuf.Google_Protobuf_Struct {
      get {return _storage._jwks ?? SwiftProtobuf.Google_Protobuf_Struct()}
      set {_uniqueStorage()._jwks = newValue}
    }
    /// Returns true if `jwks` has been explicitly set.
    var hasJwks: Bool {return _storage._jwks != nil}
    /// Clears the value of `jwks`. Subsequent reads from it will return its default value.
    mutating func clearJwks() {_uniqueStorage()._jwks = nil}

    var jwksUri: String {
      get {return _storage._jwksUri}
      set {_uniqueStorage()._jwksUri = newValue}
    }

    var logoUri: String {
      get {return _storage._logoUri}
      set {_uniqueStorage()._logoUri = newValue}
    }

    var metadata: SwiftProtobuf.Google_Protobuf_Struct {
      get {return _storage._metadata ?? SwiftProtobuf.Google_Protobuf_Struct()}
      set {_uniqueStorage()._metadata = newValue}
    }
    /// Returns true if `metadata` has been explicitly set.
    var hasMetadata: Bool {return _storage._metadata != nil}
    /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
    mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

    var owner: String {
      get {return _storage._owner}
      set {_uniqueStorage()._owner = newValue}
    }

    var policyUri: String {
      get {return _storage._policyUri}
      set {_uniqueStorage()._policyUri = newValue}
    }

    var postLogoutRedirectUris: [String] {
      get {return _storage._postLogoutRedirectUris}
      set {_uniqueStorage()._postLogoutRedirectUris = newValue}
    }

    var redirectUris: [String] {
      get {return _storage._redirectUris}
      set {_uniqueStorage()._redirectUris = newValue}
    }

    var requestObjectSigningAlg: Depot_Devtools_Auth_V0_Identity_Admin_RequestObjectSigningAlg {
      get {return _storage._requestObjectSigningAlg}
      set {_uniqueStorage()._requestObjectSigningAlg = newValue}
    }

    var requestUris: [String] {
      get {return _storage._requestUris}
      set {_uniqueStorage()._requestUris = newValue}
    }

    var responseTypes: [Depot_Devtools_Auth_V0_Identity_Admin_ResponseType] {
      get {return _storage._responseTypes}
      set {_uniqueStorage()._responseTypes = newValue}
    }

    var scope: String {
      get {return _storage._scope}
      set {_uniqueStorage()._scope = newValue}
    }

    var sectorIdentifierUri: String {
      get {return _storage._sectorIdentifierUri}
      set {_uniqueStorage()._sectorIdentifierUri = newValue}
    }

    var subjectType: Depot_Devtools_Auth_V0_Identity_Admin_SubjectType {
      get {return _storage._subjectType}
      set {_uniqueStorage()._subjectType = newValue}
    }

    var tokenEndpointAuthMethod: Depot_Devtools_Auth_V0_Identity_Admin_TokenEndpointAuthMethod {
      get {return _storage._tokenEndpointAuthMethod}
      set {_uniqueStorage()._tokenEndpointAuthMethod = newValue}
    }

    var tokenEndpointAuthSigningAlg: Depot_Devtools_Auth_V0_Identity_Admin_TokenEndpointAuthSigningAlg {
      get {return _storage._tokenEndpointAuthSigningAlg}
      set {_uniqueStorage()._tokenEndpointAuthSigningAlg = newValue}
    }

    var tosUri: String {
      get {return _storage._tosUri}
      set {_uniqueStorage()._tosUri = newValue}
    }

    var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._updatedAt = newValue}
    }
    /// Returns true if `updatedAt` has been explicitly set.
    var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
    /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
    mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

    var userinfoSignedResponseAlg: Depot_Devtools_Auth_V0_Identity_Admin_UserinfoSignedResponseAlg {
      get {return _storage._userinfoSignedResponseAlg}
      set {_uniqueStorage()._userinfoSignedResponseAlg = newValue}
    }

    var clientType: Depot_Devtools_Auth_V0_Identity_Admin_ClientType {
      get {return _storage._clientType}
      set {_uniqueStorage()._clientType = newValue}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_CreateOAuth2ClientRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var allowedCorsOrigins: [String] {
    get {return _storage._allowedCorsOrigins}
    set {_uniqueStorage()._allowedCorsOrigins = newValue}
  }

  var audience: [String] {
    get {return _storage._audience}
    set {_uniqueStorage()._audience = newValue}
  }

  var backchannelLogoutSessionRequired: Bool {
    get {return _storage._backchannelLogoutSessionRequired}
    set {_uniqueStorage()._backchannelLogoutSessionRequired = newValue}
  }

  var backchannelLogoutUri: String {
    get {return _storage._backchannelLogoutUri}
    set {_uniqueStorage()._backchannelLogoutUri = newValue}
  }

  var clientName: String {
    get {return _storage._clientName}
    set {_uniqueStorage()._clientName = newValue}
  }

  var clientUri: String {
    get {return _storage._clientUri}
    set {_uniqueStorage()._clientUri = newValue}
  }

  var contacts: [String] {
    get {return _storage._contacts}
    set {_uniqueStorage()._contacts = newValue}
  }

  var frontchannelLogoutSessionRequired: Bool {
    get {return _storage._frontchannelLogoutSessionRequired}
    set {_uniqueStorage()._frontchannelLogoutSessionRequired = newValue}
  }

  var frontchannelLogoutUri: String {
    get {return _storage._frontchannelLogoutUri}
    set {_uniqueStorage()._frontchannelLogoutUri = newValue}
  }

  var grantTypes: [Depot_Devtools_Auth_V0_Identity_Admin_GrantType] {
    get {return _storage._grantTypes}
    set {_uniqueStorage()._grantTypes = newValue}
  }

  var jwks: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _storage._jwks ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_uniqueStorage()._jwks = newValue}
  }
  /// Returns true if `jwks` has been explicitly set.
  var hasJwks: Bool {return _storage._jwks != nil}
  /// Clears the value of `jwks`. Subsequent reads from it will return its default value.
  mutating func clearJwks() {_uniqueStorage()._jwks = nil}

  var jwksUri: String {
    get {return _storage._jwksUri}
    set {_uniqueStorage()._jwksUri = newValue}
  }

  var logoUri: String {
    get {return _storage._logoUri}
    set {_uniqueStorage()._logoUri = newValue}
  }

  var metadata: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _storage._metadata ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  var owner: String {
    get {return _storage._owner}
    set {_uniqueStorage()._owner = newValue}
  }

  var policyUri: String {
    get {return _storage._policyUri}
    set {_uniqueStorage()._policyUri = newValue}
  }

  var postLogoutRedirectUris: [String] {
    get {return _storage._postLogoutRedirectUris}
    set {_uniqueStorage()._postLogoutRedirectUris = newValue}
  }

  var redirectUris: [String] {
    get {return _storage._redirectUris}
    set {_uniqueStorage()._redirectUris = newValue}
  }

  var requestObjectSigningAlg: Depot_Devtools_Auth_V0_Identity_Admin_RequestObjectSigningAlg {
    get {return _storage._requestObjectSigningAlg}
    set {_uniqueStorage()._requestObjectSigningAlg = newValue}
  }

  var requestUris: [String] {
    get {return _storage._requestUris}
    set {_uniqueStorage()._requestUris = newValue}
  }

  var responseTypes: [Depot_Devtools_Auth_V0_Identity_Admin_ResponseType] {
    get {return _storage._responseTypes}
    set {_uniqueStorage()._responseTypes = newValue}
  }

  var scope: String {
    get {return _storage._scope}
    set {_uniqueStorage()._scope = newValue}
  }

  var sectorIdentifierUri: String {
    get {return _storage._sectorIdentifierUri}
    set {_uniqueStorage()._sectorIdentifierUri = newValue}
  }

  var subjectType: Depot_Devtools_Auth_V0_Identity_Admin_SubjectType {
    get {return _storage._subjectType}
    set {_uniqueStorage()._subjectType = newValue}
  }

  var tokenEndpointAuthMethod: Depot_Devtools_Auth_V0_Identity_Admin_TokenEndpointAuthMethod {
    get {return _storage._tokenEndpointAuthMethod}
    set {_uniqueStorage()._tokenEndpointAuthMethod = newValue}
  }

  var tokenEndpointAuthSigningAlg: Depot_Devtools_Auth_V0_Identity_Admin_TokenEndpointAuthSigningAlg {
    get {return _storage._tokenEndpointAuthSigningAlg}
    set {_uniqueStorage()._tokenEndpointAuthSigningAlg = newValue}
  }

  var tosUri: String {
    get {return _storage._tosUri}
    set {_uniqueStorage()._tosUri = newValue}
  }

  var userinfoSignedResponseAlg: Depot_Devtools_Auth_V0_Identity_Admin_UserinfoSignedResponseAlg {
    get {return _storage._userinfoSignedResponseAlg}
    set {_uniqueStorage()._userinfoSignedResponseAlg = newValue}
  }

  var clientSecret: String {
    get {return _storage._clientSecret}
    set {_uniqueStorage()._clientSecret = newValue}
  }

  var clientType: Depot_Devtools_Auth_V0_Identity_Admin_ClientType {
    get {return _storage._clientType}
    set {_uniqueStorage()._clientType = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Depot_Devtools_Auth_V0_Identity_Admin_CreateOAuth2ClientResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clientID: String = String()

  var clientSecret: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_UpdateOAuth2ClientRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var allowedCorsOrigins: [String] {
    get {return _storage._allowedCorsOrigins}
    set {_uniqueStorage()._allowedCorsOrigins = newValue}
  }

  var audience: [String] {
    get {return _storage._audience}
    set {_uniqueStorage()._audience = newValue}
  }

  var backchannelLogoutSessionRequired: Bool {
    get {return _storage._backchannelLogoutSessionRequired}
    set {_uniqueStorage()._backchannelLogoutSessionRequired = newValue}
  }

  var backchannelLogoutUri: String {
    get {return _storage._backchannelLogoutUri}
    set {_uniqueStorage()._backchannelLogoutUri = newValue}
  }

  var clientName: String {
    get {return _storage._clientName}
    set {_uniqueStorage()._clientName = newValue}
  }

  var clientUri: String {
    get {return _storage._clientUri}
    set {_uniqueStorage()._clientUri = newValue}
  }

  var contacts: [String] {
    get {return _storage._contacts}
    set {_uniqueStorage()._contacts = newValue}
  }

  var frontchannelLogoutSessionRequired: Bool {
    get {return _storage._frontchannelLogoutSessionRequired}
    set {_uniqueStorage()._frontchannelLogoutSessionRequired = newValue}
  }

  var frontchannelLogoutUri: String {
    get {return _storage._frontchannelLogoutUri}
    set {_uniqueStorage()._frontchannelLogoutUri = newValue}
  }

  var grantTypes: [Depot_Devtools_Auth_V0_Identity_Admin_GrantType] {
    get {return _storage._grantTypes}
    set {_uniqueStorage()._grantTypes = newValue}
  }

  var jwks: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _storage._jwks ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_uniqueStorage()._jwks = newValue}
  }
  /// Returns true if `jwks` has been explicitly set.
  var hasJwks: Bool {return _storage._jwks != nil}
  /// Clears the value of `jwks`. Subsequent reads from it will return its default value.
  mutating func clearJwks() {_uniqueStorage()._jwks = nil}

  var jwksUri: String {
    get {return _storage._jwksUri}
    set {_uniqueStorage()._jwksUri = newValue}
  }

  var logoUri: String {
    get {return _storage._logoUri}
    set {_uniqueStorage()._logoUri = newValue}
  }

  var metadata: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _storage._metadata ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  var owner: String {
    get {return _storage._owner}
    set {_uniqueStorage()._owner = newValue}
  }

  var policyUri: String {
    get {return _storage._policyUri}
    set {_uniqueStorage()._policyUri = newValue}
  }

  var postLogoutRedirectUris: [String] {
    get {return _storage._postLogoutRedirectUris}
    set {_uniqueStorage()._postLogoutRedirectUris = newValue}
  }

  var redirectUris: [String] {
    get {return _storage._redirectUris}
    set {_uniqueStorage()._redirectUris = newValue}
  }

  var requestObjectSigningAlg: Depot_Devtools_Auth_V0_Identity_Admin_RequestObjectSigningAlg {
    get {return _storage._requestObjectSigningAlg}
    set {_uniqueStorage()._requestObjectSigningAlg = newValue}
  }

  var requestUris: [String] {
    get {return _storage._requestUris}
    set {_uniqueStorage()._requestUris = newValue}
  }

  var responseTypes: [Depot_Devtools_Auth_V0_Identity_Admin_ResponseType] {
    get {return _storage._responseTypes}
    set {_uniqueStorage()._responseTypes = newValue}
  }

  var scope: String {
    get {return _storage._scope}
    set {_uniqueStorage()._scope = newValue}
  }

  var sectorIdentifierUri: String {
    get {return _storage._sectorIdentifierUri}
    set {_uniqueStorage()._sectorIdentifierUri = newValue}
  }

  var subjectType: Depot_Devtools_Auth_V0_Identity_Admin_SubjectType {
    get {return _storage._subjectType}
    set {_uniqueStorage()._subjectType = newValue}
  }

  var tokenEndpointAuthMethod: Depot_Devtools_Auth_V0_Identity_Admin_TokenEndpointAuthMethod {
    get {return _storage._tokenEndpointAuthMethod}
    set {_uniqueStorage()._tokenEndpointAuthMethod = newValue}
  }

  var tokenEndpointAuthSigningAlg: Depot_Devtools_Auth_V0_Identity_Admin_TokenEndpointAuthSigningAlg {
    get {return _storage._tokenEndpointAuthSigningAlg}
    set {_uniqueStorage()._tokenEndpointAuthSigningAlg = newValue}
  }

  var tosUri: String {
    get {return _storage._tosUri}
    set {_uniqueStorage()._tosUri = newValue}
  }

  var userinfoSignedResponseAlg: Depot_Devtools_Auth_V0_Identity_Admin_UserinfoSignedResponseAlg {
    get {return _storage._userinfoSignedResponseAlg}
    set {_uniqueStorage()._userinfoSignedResponseAlg = newValue}
  }

  var clientSecret: String {
    get {return _storage._clientSecret}
    set {_uniqueStorage()._clientSecret = newValue}
  }

  var clientID: String {
    get {return _storage._clientID}
    set {_uniqueStorage()._clientID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Depot_Devtools_Auth_V0_Identity_Admin_UpdateOAuth2ClientResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clientID: String = String()

  var clientSecret: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_DeleteOAuth2ClientRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clientID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_DeleteOAuth2ClientResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetAddressesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identityID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetAddressesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var addresses: [Depot_Devtools_Auth_V0_Identity_Admin_GetAddressesResponse.Address] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Address {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var identityID: String = String()

    var name: String = String()

    var address: String = String()

    var verified: Bool = false

    var idSchemaKey: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetAddressRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var match: Depot_Devtools_Auth_V0_Identity_Admin_GetAddressRequest.OneOf_Match? = nil

  var id: String {
    get {
      if case .id(let v)? = match {return v}
      return String()
    }
    set {match = .id(newValue)}
  }

  var verification: String {
    get {
      if case .verification(let v)? = match {return v}
      return String()
    }
    set {match = .verification(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Match: Equatable {
    case id(String)
    case verification(String)

  #if !swift(>=4.1)
    static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetAddressRequest.OneOf_Match, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetAddressRequest.OneOf_Match) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.id, .id): return {
        guard case .id(let l) = lhs, case .id(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.verification, .verification): return {
        guard case .verification(let l) = lhs, case .verification(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetAddressResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var identityID: String = String()

  var name: String = String()

  var address: String = String()

  var verified: Bool = false

  var idSchemaKey: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_UpdateAddressRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var attribute: Depot_Devtools_Auth_V0_Identity_Admin_UpdateAddressRequest.OneOf_Attribute? = nil

  var verified: Bool {
    get {
      if case .verified(let v)? = attribute {return v}
      return false
    }
    set {attribute = .verified(newValue)}
  }

  var address: String {
    get {
      if case .address(let v)? = attribute {return v}
      return String()
    }
    set {attribute = .address(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Attribute: Equatable {
    case verified(Bool)
    case address(String)

  #if !swift(>=4.1)
    static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateAddressRequest.OneOf_Attribute, rhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateAddressRequest.OneOf_Attribute) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.verified, .verified): return {
        guard case .verified(let l) = lhs, case .verified(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.address, .address): return {
        guard case .address(let l) = lhs, case .address(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_UpdateAddressResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetTraitsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identityID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetTraitsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var traits: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_UpdateTraitsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identityID: String = String()

  var traits: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_UpdateTraitsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityLoginAttemptsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identityID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityLoginAttemptsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var attempts: [Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityLoginAttemptsResponse.Attempt] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Attempt {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var identityID: String = String()

    var status: String = String()

    var authenticationMethods: [String] = []

    var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_createdAt = newValue}
    }
    /// Returns true if `createdAt` has been explicitly set.
    var hasCreatedAt: Bool {return self._createdAt != nil}
    /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
    mutating func clearCreatedAt() {self._createdAt = nil}

    var expiresAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _expiresAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_expiresAt = newValue}
    }
    /// Returns true if `expiresAt` has been explicitly set.
    var hasExpiresAt: Bool {return self._expiresAt != nil}
    /// Clears the value of `expiresAt`. Subsequent reads from it will return its default value.
    mutating func clearExpiresAt() {self._expiresAt = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _expiresAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_CreateIdSchemaRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var content: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _content ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  var hasContent: Bool {return self._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  mutating func clearContent() {self._content = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _content: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

struct Depot_Devtools_Auth_V0_Identity_Admin_CreateIdSchemaResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetIdSchemasRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetIdSchemasResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jsonschemas: [Depot_Devtools_Auth_V0_Identity_Admin_GetIdSchemasResponse.JsonSchema] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct JsonSchema {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var name: String = String()

    var content: SwiftProtobuf.Google_Protobuf_Struct {
      get {return _content ?? SwiftProtobuf.Google_Protobuf_Struct()}
      set {_content = newValue}
    }
    /// Returns true if `content` has been explicitly set.
    var hasContent: Bool {return self._content != nil}
    /// Clears the value of `content`. Subsequent reads from it will return its default value.
    mutating func clearContent() {self._content = nil}

    var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_createdAt = newValue}
    }
    /// Returns true if `createdAt` has been explicitly set.
    var hasCreatedAt: Bool {return self._createdAt != nil}
    /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
    mutating func clearCreatedAt() {self._createdAt = nil}

    var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_updatedAt = newValue}
    }
    /// Returns true if `updatedAt` has been explicitly set.
    var hasUpdatedAt: Bool {return self._updatedAt != nil}
    /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
    mutating func clearUpdatedAt() {self._updatedAt = nil}

    var isDefault: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _content: SwiftProtobuf.Google_Protobuf_Struct? = nil
    fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetIdSchemaRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetIdSchemaResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var content: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _content ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  var hasContent: Bool {return self._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  mutating func clearContent() {self._content = nil}

  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {self._createdAt = nil}

  var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  var hasUpdatedAt: Bool {return self._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedAt() {self._updatedAt = nil}

  var isDefault: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _content: SwiftProtobuf.Google_Protobuf_Struct? = nil
  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetDefaultIdSchemaRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetDefaultIdSchemaResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var content: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _content ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  var hasContent: Bool {return self._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  mutating func clearContent() {self._content = nil}

  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {self._createdAt = nil}

  var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  var hasUpdatedAt: Bool {return self._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedAt() {self._updatedAt = nil}

  var isDefault: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _content: SwiftProtobuf.Google_Protobuf_Struct? = nil
  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Depot_Devtools_Auth_V0_Identity_Admin_UpdateIdSchemaRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var content: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _content ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  var hasContent: Bool {return self._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  mutating func clearContent() {self._content = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _content: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

struct Depot_Devtools_Auth_V0_Identity_Admin_UpdateIdSchemaResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_MarkDefaultIdSchemaRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_MarkDefaultIdSchemaResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_DeleteIdSchemaRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_DeleteIdSchemaResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var welcome: Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailTemplate {
    get {return _welcome ?? Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailTemplate()}
    set {_welcome = newValue}
  }
  /// Returns true if `welcome` has been explicitly set.
  var hasWelcome: Bool {return self._welcome != nil}
  /// Clears the value of `welcome`. Subsequent reads from it will return its default value.
  mutating func clearWelcome() {self._welcome = nil}

  var accountVerification: Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailTemplate {
    get {return _accountVerification ?? Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailTemplate()}
    set {_accountVerification = newValue}
  }
  /// Returns true if `accountVerification` has been explicitly set.
  var hasAccountVerification: Bool {return self._accountVerification != nil}
  /// Clears the value of `accountVerification`. Subsequent reads from it will return its default value.
  mutating func clearAccountVerification() {self._accountVerification = nil}

  var accountRecovery: Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailTemplate {
    get {return _accountRecovery ?? Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailTemplate()}
    set {_accountRecovery = newValue}
  }
  /// Returns true if `accountRecovery` has been explicitly set.
  var hasAccountRecovery: Bool {return self._accountRecovery != nil}
  /// Clears the value of `accountRecovery`. Subsequent reads from it will return its default value.
  mutating func clearAccountRecovery() {self._accountRecovery = nil}

  var accountRecovered: Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailTemplate {
    get {return _accountRecovered ?? Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailTemplate()}
    set {_accountRecovered = newValue}
  }
  /// Returns true if `accountRecovered` has been explicitly set.
  var hasAccountRecovered: Bool {return self._accountRecovered != nil}
  /// Clears the value of `accountRecovered`. Subsequent reads from it will return its default value.
  mutating func clearAccountRecovered() {self._accountRecovered = nil}

  var otp: Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailTemplate {
    get {return _otp ?? Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailTemplate()}
    set {_otp = newValue}
  }
  /// Returns true if `otp` has been explicitly set.
  var hasOtp: Bool {return self._otp != nil}
  /// Clears the value of `otp`. Subsequent reads from it will return its default value.
  mutating func clearOtp() {self._otp = nil}

  var smtp: Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailSender {
    get {return _smtp ?? Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailSender()}
    set {_smtp = newValue}
  }
  /// Returns true if `smtp` has been explicitly set.
  var hasSmtp: Bool {return self._smtp != nil}
  /// Clears the value of `smtp`. Subsequent reads from it will return its default value.
  mutating func clearSmtp() {self._smtp = nil}

  var projectID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct EmailTemplate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var content: String = String()

    var subject: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct EmailSender {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var emailAddress: String = String()

    var smtpHost: String = String()

    var smtpPort: UInt32 = 0

    var smtpUsername: String = String()

    var smtpPassword: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _welcome: Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailTemplate? = nil
  fileprivate var _accountVerification: Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailTemplate? = nil
  fileprivate var _accountRecovery: Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailTemplate? = nil
  fileprivate var _accountRecovered: Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailTemplate? = nil
  fileprivate var _otp: Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailTemplate? = nil
  fileprivate var _smtp: Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailSender? = nil
}

struct Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var welcome: Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailTemplate {
    get {return _welcome ?? Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailTemplate()}
    set {_welcome = newValue}
  }
  /// Returns true if `welcome` has been explicitly set.
  var hasWelcome: Bool {return self._welcome != nil}
  /// Clears the value of `welcome`. Subsequent reads from it will return its default value.
  mutating func clearWelcome() {self._welcome = nil}

  var accountVerification: Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailTemplate {
    get {return _accountVerification ?? Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailTemplate()}
    set {_accountVerification = newValue}
  }
  /// Returns true if `accountVerification` has been explicitly set.
  var hasAccountVerification: Bool {return self._accountVerification != nil}
  /// Clears the value of `accountVerification`. Subsequent reads from it will return its default value.
  mutating func clearAccountVerification() {self._accountVerification = nil}

  var accountRecovery: Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailTemplate {
    get {return _accountRecovery ?? Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailTemplate()}
    set {_accountRecovery = newValue}
  }
  /// Returns true if `accountRecovery` has been explicitly set.
  var hasAccountRecovery: Bool {return self._accountRecovery != nil}
  /// Clears the value of `accountRecovery`. Subsequent reads from it will return its default value.
  mutating func clearAccountRecovery() {self._accountRecovery = nil}

  var accountRecovered: Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailTemplate {
    get {return _accountRecovered ?? Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailTemplate()}
    set {_accountRecovered = newValue}
  }
  /// Returns true if `accountRecovered` has been explicitly set.
  var hasAccountRecovered: Bool {return self._accountRecovered != nil}
  /// Clears the value of `accountRecovered`. Subsequent reads from it will return its default value.
  mutating func clearAccountRecovered() {self._accountRecovered = nil}

  var otp: Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailTemplate {
    get {return _otp ?? Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailTemplate()}
    set {_otp = newValue}
  }
  /// Returns true if `otp` has been explicitly set.
  var hasOtp: Bool {return self._otp != nil}
  /// Clears the value of `otp`. Subsequent reads from it will return its default value.
  mutating func clearOtp() {self._otp = nil}

  var smtp: Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailSender {
    get {return _smtp ?? Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailSender()}
    set {_smtp = newValue}
  }
  /// Returns true if `smtp` has been explicitly set.
  var hasSmtp: Bool {return self._smtp != nil}
  /// Clears the value of `smtp`. Subsequent reads from it will return its default value.
  mutating func clearSmtp() {self._smtp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct EmailTemplate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var content: String = String()

    var subject: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct EmailSender {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var emailAddress: String = String()

    var smtpHost: String = String()

    var smtpPort: UInt32 = 0

    var smtpUsername: String = String()

    var smtpPassword: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _welcome: Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailTemplate? = nil
  fileprivate var _accountVerification: Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailTemplate? = nil
  fileprivate var _accountRecovery: Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailTemplate? = nil
  fileprivate var _accountRecovered: Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailTemplate? = nil
  fileprivate var _otp: Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailTemplate? = nil
  fileprivate var _smtp: Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailSender? = nil
}

struct Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetUserBaseStatisticsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var daysBefore: UInt32 = 0

  var lifetimeStartAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lifetimeStartAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lifetimeStartAt = newValue}
  }
  /// Returns true if `lifetimeStartAt` has been explicitly set.
  var hasLifetimeStartAt: Bool {return self._lifetimeStartAt != nil}
  /// Clears the value of `lifetimeStartAt`. Subsequent reads from it will return its default value.
  mutating func clearLifetimeStartAt() {self._lifetimeStartAt = nil}

  var lifetimeEndAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lifetimeEndAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lifetimeEndAt = newValue}
  }
  /// Returns true if `lifetimeEndAt` has been explicitly set.
  var hasLifetimeEndAt: Bool {return self._lifetimeEndAt != nil}
  /// Clears the value of `lifetimeEndAt`. Subsequent reads from it will return its default value.
  mutating func clearLifetimeEndAt() {self._lifetimeEndAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _lifetimeStartAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _lifetimeEndAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Depot_Devtools_Auth_V0_Identity_Admin_GetUserBaseStatisticsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var totalUsers: Int32 = 0

  var usersPerDay: Dictionary<String,Int32> = [:]

  var sessionsPerDay: Dictionary<String,Int32> = [:]

  var totalActiveUsers: Int32 = 0

  var totalLifetimeUsed: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "depot.devtools.auth.v0.identity.admin"

extension Depot_Devtools_Auth_V0_Identity_Admin_ClientType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CLIENT_TYPE_UNSET"),
    1: .same(proto: "CLIENT_FIRST_PARTY"),
    2: .same(proto: "CLIENT_THIRD_PARTY"),
    3: .same(proto: "CLIENT_SYSTEM_PARTY"),
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_SubjectType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SUBJECT_TYPE_PUBLIC"),
    1: .same(proto: "SUBJECT_TYPE_PAIRWISE"),
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_TokenEndpointAuthMethod: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_BASIC"),
    1: .same(proto: "TOKEN_ENDPOINT_AUTH_METHOD_CLIENT_SECRET_POST"),
    2: .same(proto: "TOKEN_ENDPOINT_AUTH_METHOD_PRIVATE_KEY_JWT"),
    3: .same(proto: "TOKEN_ENDPOINT_AUTH_METHOD_NONE"),
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_TokenEndpointAuthSigningAlg: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TOKEN_ENDPOINT_AUTH_SIGNING_ALG_UNSET"),
    1: .same(proto: "TOKEN_ENDPOINT_AUTH_SIGNING_ALG_RS256"),
    2: .same(proto: "TOKEN_ENDPOINT_AUTH_SIGNING_ALG_RS384"),
    3: .same(proto: "TOKEN_ENDPOINT_AUTH_SIGNING_ALG_RS512"),
    4: .same(proto: "TOKEN_ENDPOINT_AUTH_SIGNING_ALG_PS256"),
    5: .same(proto: "TOKEN_ENDPOINT_AUTH_SIGNING_ALG_PS384"),
    6: .same(proto: "TOKEN_ENDPOINT_AUTH_SIGNING_ALG_PS512"),
    7: .same(proto: "TOKEN_ENDPOINT_AUTH_SIGNING_ALG_ES256"),
    8: .same(proto: "TOKEN_ENDPOINT_AUTH_SIGNING_ALG_ES384"),
    9: .same(proto: "TOKEN_ENDPOINT_AUTH_SIGNING_ALG_ES512"),
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GrantType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GRANT_TYPE_UNSET"),
    1: .same(proto: "GRANT_TYPE_CLIENT_CREDENTIALS"),
    2: .same(proto: "GRANT_TYPE_AUTHORIZATION_CODE"),
    3: .same(proto: "GRANT_TYPE_IMPLICIT"),
    4: .same(proto: "GRANT_TYPE_REFRESH_TOKEN"),
    5: .same(proto: "GRANT_TYPE_DEVICE_CODE"),
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_ResponseType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RESPONSE_TYPE_UNSET"),
    1: .same(proto: "RESPONSE_TYPE_NONE"),
    2: .same(proto: "RESPONSE_TYPE_ID_TOKEN"),
    3: .same(proto: "RESPONSE_TYPE_TOKEN"),
    4: .same(proto: "RESPONSE_TYPE_CODE"),
    5: .same(proto: "RESPONSE_TYPE_ID_TOKEN_TOKEN"),
    6: .same(proto: "RESPONSE_TYPE_CODE_ID_TOKEN"),
    7: .same(proto: "RESPONSE_TYPE_CODE_TOKEN"),
    8: .same(proto: "RESPONSE_TYPE_CODE_ID_TOKEN_TOKEN"),
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_RequestObjectSigningAlg: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "REQUEST_OBJECT_SIGNING_ALG_UNSET"),
    1: .same(proto: "REQUEST_OBJECT_SIGNING_ALG_NONE"),
    2: .same(proto: "REQUEST_OBJECT_SIGNING_ALG_RS256"),
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UserinfoSignedResponseAlg: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "USERINFO_SIGNED_RESPONSE_ALG_UNSET"),
    1: .same(proto: "USERINFO_SIGNED_RESPONSE_ALG_NONE"),
    2: .same(proto: "USERINFO_SIGNED_RESPONSE_ALG_RS256"),
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_CreateIdentityRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateIdentityRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .standard(proto: "connection_id"),
    3: .standard(proto: "schema_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.connectionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.schemaID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.connectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.connectionID, fieldNumber: 2)
    }
    if !self.schemaID.isEmpty {
      try visitor.visitSingularStringField(value: self.schemaID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_CreateIdentityRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_CreateIdentityRequest) -> Bool {
    if lhs._data != rhs._data {return false}
    if lhs.connectionID != rhs.connectionID {return false}
    if lhs.schemaID != rhs.schemaID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_CreateIdentityResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateIdentityResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "identity_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.identityID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identityID.isEmpty {
      try visitor.visitSingularStringField(value: self.identityID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_CreateIdentityResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_CreateIdentityResponse) -> Bool {
    if lhs.identityID != rhs.identityID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetIdentitiesRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetIdentitiesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identities"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.identities) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.identities, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesResponse) -> Bool {
    if lhs.identities != rhs.identities {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesResponse.Lock: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNLOCKED"),
    1: .same(proto: "ADMIN_LOCKED"),
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesResponse.Identity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesResponse.protoMessageName + ".Identity"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "identity_id"),
    2: .standard(proto: "created_at"),
    3: .standard(proto: "updated_at"),
    4: .standard(proto: "main_identifier"),
    5: .standard(proto: "schema_id"),
    6: .same(proto: "lock"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.identityID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.mainIdentifier) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.schemaID) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.lock) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identityID.isEmpty {
      try visitor.visitSingularStringField(value: self.identityID, fieldNumber: 1)
    }
    if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._updatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.mainIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.mainIdentifier, fieldNumber: 4)
    }
    if !self.schemaID.isEmpty {
      try visitor.visitSingularStringField(value: self.schemaID, fieldNumber: 5)
    }
    if self.lock != .unlocked {
      try visitor.visitSingularEnumField(value: self.lock, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesResponse.Identity, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesResponse.Identity) -> Bool {
    if lhs.identityID != rhs.identityID {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs._updatedAt != rhs._updatedAt {return false}
    if lhs.mainIdentifier != rhs.mainIdentifier {return false}
    if lhs.schemaID != rhs.schemaID {return false}
    if lhs.lock != rhs.lock {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetIdentityRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "identity_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.identityID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identityID.isEmpty {
      try visitor.visitSingularStringField(value: self.identityID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityRequest) -> Bool {
    if lhs.identityID != rhs.identityID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetIdentityResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "identity_id"),
    2: .standard(proto: "created_at"),
    3: .standard(proto: "updated_at"),
    4: .standard(proto: "main_identifier"),
    5: .standard(proto: "traits_id"),
    6: .standard(proto: "addresses_ids"),
    7: .standard(proto: "credentials_ids"),
    8: .standard(proto: "schema_id"),
    9: .same(proto: "lock"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.identityID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.mainIdentifier) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.traitsID) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.addressesIds) }()
      case 7: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.credentialsIds) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.schemaID) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.lock) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identityID.isEmpty {
      try visitor.visitSingularStringField(value: self.identityID, fieldNumber: 1)
    }
    if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._updatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.mainIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.mainIdentifier, fieldNumber: 4)
    }
    if !self.traitsID.isEmpty {
      try visitor.visitSingularStringField(value: self.traitsID, fieldNumber: 5)
    }
    if !self.addressesIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.addressesIds, fieldNumber: 6)
    }
    if !self.credentialsIds.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.credentialsIds, fieldNumber: 7)
    }
    if !self.schemaID.isEmpty {
      try visitor.visitSingularStringField(value: self.schemaID, fieldNumber: 8)
    }
    if self.lock != .unlocked {
      try visitor.visitSingularEnumField(value: self.lock, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityResponse) -> Bool {
    if lhs.identityID != rhs.identityID {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs._updatedAt != rhs._updatedAt {return false}
    if lhs.mainIdentifier != rhs.mainIdentifier {return false}
    if lhs.traitsID != rhs.traitsID {return false}
    if lhs.addressesIds != rhs.addressesIds {return false}
    if lhs.credentialsIds != rhs.credentialsIds {return false}
    if lhs.schemaID != rhs.schemaID {return false}
    if lhs.lock != rhs.lock {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityResponse.Lock: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNLOCKED"),
    1: .same(proto: "ADMIN_LOCKED"),
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesByAttributeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetIdentitiesByAttributeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "attribute"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.attribute) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.attribute.isEmpty {
      try visitor.visitSingularStringField(value: self.attribute, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesByAttributeRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesByAttributeRequest) -> Bool {
    if lhs.attribute != rhs.attribute {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesByAttributeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetIdentitiesByAttributeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identities"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.identities) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.identities, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesByAttributeResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesByAttributeResponse) -> Bool {
    if lhs.identities != rhs.identities {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesByAttributeResponse.Identity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesByAttributeResponse.protoMessageName + ".Identity"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "identity_id"),
    2: .standard(proto: "created_at"),
    3: .standard(proto: "updated_at"),
    4: .standard(proto: "main_identifier"),
    5: .standard(proto: "traits_id"),
    6: .standard(proto: "addresses_ids"),
    7: .standard(proto: "credentials_ids"),
    8: .standard(proto: "schema_id"),
    9: .same(proto: "lock"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.identityID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.mainIdentifier) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.traitsID) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.addressesIds) }()
      case 7: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.credentialsIds) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.schemaID) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.lock) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identityID.isEmpty {
      try visitor.visitSingularStringField(value: self.identityID, fieldNumber: 1)
    }
    if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._updatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.mainIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.mainIdentifier, fieldNumber: 4)
    }
    if !self.traitsID.isEmpty {
      try visitor.visitSingularStringField(value: self.traitsID, fieldNumber: 5)
    }
    if !self.addressesIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.addressesIds, fieldNumber: 6)
    }
    if !self.credentialsIds.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.credentialsIds, fieldNumber: 7)
    }
    if !self.schemaID.isEmpty {
      try visitor.visitSingularStringField(value: self.schemaID, fieldNumber: 8)
    }
    if self.lock != .unlocked {
      try visitor.visitSingularEnumField(value: self.lock, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesByAttributeResponse.Identity, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesByAttributeResponse.Identity) -> Bool {
    if lhs.identityID != rhs.identityID {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs._updatedAt != rhs._updatedAt {return false}
    if lhs.mainIdentifier != rhs.mainIdentifier {return false}
    if lhs.traitsID != rhs.traitsID {return false}
    if lhs.addressesIds != rhs.addressesIds {return false}
    if lhs.credentialsIds != rhs.credentialsIds {return false}
    if lhs.schemaID != rhs.schemaID {return false}
    if lhs.lock != rhs.lock {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetIdentitiesByAttributeResponse.Identity.Lock: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNLOCKED"),
    1: .same(proto: "ADMIN_LOCKED"),
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateIdentityRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateIdentityRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "identity_id"),
    2: .same(proto: "lock"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.identityID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.lock) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identityID.isEmpty {
      try visitor.visitSingularStringField(value: self.identityID, fieldNumber: 1)
    }
    if self.lock != .unlocked {
      try visitor.visitSingularEnumField(value: self.lock, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateIdentityRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateIdentityRequest) -> Bool {
    if lhs.identityID != rhs.identityID {return false}
    if lhs.lock != rhs.lock {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateIdentityRequest.Lock: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNLOCKED"),
    1: .same(proto: "ADMIN_LOCKED"),
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateIdentityResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateIdentityResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateIdentityResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateIdentityResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_DeleteIdentityRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteIdentityRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "identity_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.identityID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identityID.isEmpty {
      try visitor.visitSingularStringField(value: self.identityID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_DeleteIdentityRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_DeleteIdentityRequest) -> Bool {
    if lhs.identityID != rhs.identityID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_DeleteIdentityResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteIdentityResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_DeleteIdentityResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_DeleteIdentityResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetCredentialsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetCredentialsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "identity_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.identityID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identityID.isEmpty {
      try visitor.visitSingularStringField(value: self.identityID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetCredentialsRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetCredentialsRequest) -> Bool {
    if lhs.identityID != rhs.identityID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetCredentialsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetCredentialsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "credentials"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Depot_Devtools_Auth_V0_Identity_Admin_GetCredentialsResponse.Credential>.self, value: &self.credentials) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.credentials.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Depot_Devtools_Auth_V0_Identity_Admin_GetCredentialsResponse.Credential>.self, value: self.credentials, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetCredentialsResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetCredentialsResponse) -> Bool {
    if lhs.credentials != rhs.credentials {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetCredentialsResponse.Credential: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Depot_Devtools_Auth_V0_Identity_Admin_GetCredentialsResponse.protoMessageName + ".Credential"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "credential_id"),
    2: .standard(proto: "created_at"),
    3: .standard(proto: "updated_at"),
    4: .standard(proto: "identity_id"),
    5: .same(proto: "type"),
    6: .same(proto: "name"),
    7: .same(proto: "configured"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.credentialID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.identityID) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.configured) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.credentialID.isEmpty {
      try visitor.visitSingularStringField(value: self.credentialID, fieldNumber: 1)
    }
    if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._updatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.identityID.isEmpty {
      try visitor.visitSingularStringField(value: self.identityID, fieldNumber: 4)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 5)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 6)
    }
    if self.configured != false {
      try visitor.visitSingularBoolField(value: self.configured, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetCredentialsResponse.Credential, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetCredentialsResponse.Credential) -> Bool {
    if lhs.credentialID != rhs.credentialID {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs._updatedAt != rhs._updatedAt {return false}
    if lhs.identityID != rhs.identityID {return false}
    if lhs.type != rhs.type {return false}
    if lhs.name != rhs.name {return false}
    if lhs.configured != rhs.configured {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateCredentialRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateCredentialRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .standard(proto: "connection_id"),
    3: .standard(proto: "identity_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.connectionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.identityID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.connectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.connectionID, fieldNumber: 2)
    }
    if !self.identityID.isEmpty {
      try visitor.visitSingularStringField(value: self.identityID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateCredentialRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateCredentialRequest) -> Bool {
    if lhs._data != rhs._data {return false}
    if lhs.connectionID != rhs.connectionID {return false}
    if lhs.identityID != rhs.identityID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateCredentialResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateCredentialResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateCredentialResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateCredentialResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_CreateConnectionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateConnectionRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "client_id"),
    3: .standard(proto: "client_secret"),
    4: .standard(proto: "button_image_url"),
    6: .same(proto: "provider"),
    7: .standard(proto: "oidc_discovery_url"),
    8: .same(proto: "mfa"),
    9: .same(proto: "type"),
    10: .same(proto: "scopes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.clientSecret) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.buttonImageURL) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.provider) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.oidcDiscoveryURL) }()
      case 8: try { try decoder.decodeRepeatedStringField(value: &self.mfa) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.scopes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 2)
    }
    if !self.clientSecret.isEmpty {
      try visitor.visitSingularStringField(value: self.clientSecret, fieldNumber: 3)
    }
    if !self.buttonImageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.buttonImageURL, fieldNumber: 4)
    }
    if self.provider != .none {
      try visitor.visitSingularEnumField(value: self.provider, fieldNumber: 6)
    }
    if !self.oidcDiscoveryURL.isEmpty {
      try visitor.visitSingularStringField(value: self.oidcDiscoveryURL, fieldNumber: 7)
    }
    if !self.mfa.isEmpty {
      try visitor.visitRepeatedStringField(value: self.mfa, fieldNumber: 8)
    }
    if self.type != .unset {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 9)
    }
    if !self.scopes.isEmpty {
      try visitor.visitSingularStringField(value: self.scopes, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_CreateConnectionRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_CreateConnectionRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.clientSecret != rhs.clientSecret {return false}
    if lhs.buttonImageURL != rhs.buttonImageURL {return false}
    if lhs.provider != rhs.provider {return false}
    if lhs.oidcDiscoveryURL != rhs.oidcDiscoveryURL {return false}
    if lhs.mfa != rhs.mfa {return false}
    if lhs.type != rhs.type {return false}
    if lhs.scopes != rhs.scopes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_CreateConnectionRequest.Providers: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "OPENID"),
    2: .same(proto: "AMAZON"),
    3: .same(proto: "BITBUCKET"),
    4: .same(proto: "BOX"),
    5: .same(proto: "DAILYMOTION"),
    6: .same(proto: "DEEZER"),
    7: .same(proto: "DIGITALOCEAN"),
    8: .same(proto: "DISCORD"),
    9: .same(proto: "DROPBOX"),
    10: .same(proto: "EVEONLINE"),
    11: .same(proto: "FACEBOOK"),
    12: .same(proto: "FITBIT"),
    13: .same(proto: "GITEA"),
    14: .same(proto: "GITHUB"),
    15: .same(proto: "GITLAB"),
    16: .same(proto: "GOOGLE"),
    18: .same(proto: "SHOPIFY"),
    19: .same(proto: "SOUNDCLOUD"),
    20: .same(proto: "SPOTIFY"),
    21: .same(proto: "STEAM"),
    22: .same(proto: "STRIPE"),
    23: .same(proto: "TWITCH"),
    24: .same(proto: "UBER"),
    25: .same(proto: "WEPAY"),
    26: .same(proto: "YAHOO"),
    27: .same(proto: "YAMMER"),
    28: .same(proto: "HEROKU"),
    29: .same(proto: "INSTAGRAM"),
    30: .same(proto: "INTERCOM"),
    31: .same(proto: "KAKAO"),
    32: .same(proto: "LASTFM"),
    33: .same(proto: "LINKEDIN"),
    34: .same(proto: "LINE"),
    35: .same(proto: "ONEDRIVE"),
    36: .same(proto: "AZUREAD"),
    37: .same(proto: "MICROSOFTONLINE"),
    38: .same(proto: "BATTLENET"),
    39: .same(proto: "PAYPAL"),
    40: .same(proto: "TWITTER"),
    41: .same(proto: "SALESFORCE"),
    42: .same(proto: "TYPETALK"),
    43: .same(proto: "SLACK"),
    44: .same(proto: "MEETUP"),
    46: .same(proto: "XERO"),
    47: .same(proto: "VK"),
    48: .same(proto: "NAVER"),
    49: .same(proto: "YANDEX"),
    50: .same(proto: "NEXTCLOUD"),
    52: .same(proto: "APPLE"),
    53: .same(proto: "STRAVA"),
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_CreateConnectionRequest.Types: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "PASSWORD"),
    2: .same(proto: "OTP"),
    3: .same(proto: "TOTP"),
    4: .same(proto: "OIDC"),
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_CreateConnectionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateConnectionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_CreateConnectionResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_CreateConnectionResponse) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetConnectionsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetConnectionsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "connections"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.connections) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.connections.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.connections, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsResponse) -> Bool {
    if lhs.connections != rhs.connections {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsResponse.Providers: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "OPENID"),
    2: .same(proto: "AMAZON"),
    3: .same(proto: "BITBUCKET"),
    4: .same(proto: "BOX"),
    5: .same(proto: "DAILYMOTION"),
    6: .same(proto: "DEEZER"),
    7: .same(proto: "DIGITALOCEAN"),
    8: .same(proto: "DISCORD"),
    9: .same(proto: "DROPBOX"),
    10: .same(proto: "EVEONLINE"),
    11: .same(proto: "FACEBOOK"),
    12: .same(proto: "FITBIT"),
    13: .same(proto: "GITEA"),
    14: .same(proto: "GITHUB"),
    15: .same(proto: "GITLAB"),
    16: .same(proto: "GOOGLE"),
    18: .same(proto: "SHOPIFY"),
    19: .same(proto: "SOUNDCLOUD"),
    20: .same(proto: "SPOTIFY"),
    21: .same(proto: "STEAM"),
    22: .same(proto: "STRIPE"),
    23: .same(proto: "TWITCH"),
    24: .same(proto: "UBER"),
    25: .same(proto: "WEPAY"),
    26: .same(proto: "YAHOO"),
    27: .same(proto: "YAMMER"),
    28: .same(proto: "HEROKU"),
    29: .same(proto: "INSTAGRAM"),
    30: .same(proto: "INTERCOM"),
    31: .same(proto: "KAKAO"),
    32: .same(proto: "LASTFM"),
    33: .same(proto: "LINKEDIN"),
    34: .same(proto: "LINE"),
    35: .same(proto: "ONEDRIVE"),
    36: .same(proto: "AZUREAD"),
    37: .same(proto: "MICROSOFTONLINE"),
    38: .same(proto: "BATTLENET"),
    39: .same(proto: "PAYPAL"),
    40: .same(proto: "TWITTER"),
    41: .same(proto: "SALESFORCE"),
    42: .same(proto: "TYPETALK"),
    43: .same(proto: "SLACK"),
    44: .same(proto: "MEETUP"),
    46: .same(proto: "XERO"),
    47: .same(proto: "VK"),
    48: .same(proto: "NAVER"),
    49: .same(proto: "YANDEX"),
    50: .same(proto: "NEXTCLOUD"),
    52: .same(proto: "APPLE"),
    53: .same(proto: "STRAVA"),
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsResponse.Types: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "PASSWORD"),
    2: .same(proto: "OTP"),
    3: .same(proto: "TOTP"),
    4: .same(proto: "OIDC"),
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsResponse.Purposes: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PURPOSE_UNKNOWN"),
    1: .same(proto: "PURPOSE_MAIN_FACTOR"),
    2: .same(proto: "PURPOSE_SECOND_FACTOR"),
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsResponse.Connection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsResponse.protoMessageName + ".Connection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "client_id"),
    3: .standard(proto: "client_secret"),
    4: .standard(proto: "button_image_url"),
    6: .same(proto: "provider"),
    7: .standard(proto: "oidc_discovery_url"),
    8: .same(proto: "mfa"),
    9: .same(proto: "type"),
    10: .same(proto: "id"),
    11: .same(proto: "scopes"),
    12: .same(proto: "purpose"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.clientSecret) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.buttonImageURL) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.provider) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.oidcDiscoveryURL) }()
      case 8: try { try decoder.decodeRepeatedStringField(value: &self.mfa) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.scopes) }()
      case 12: try { try decoder.decodeSingularEnumField(value: &self.purpose) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 2)
    }
    if !self.clientSecret.isEmpty {
      try visitor.visitSingularStringField(value: self.clientSecret, fieldNumber: 3)
    }
    if !self.buttonImageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.buttonImageURL, fieldNumber: 4)
    }
    if self.provider != .none {
      try visitor.visitSingularEnumField(value: self.provider, fieldNumber: 6)
    }
    if !self.oidcDiscoveryURL.isEmpty {
      try visitor.visitSingularStringField(value: self.oidcDiscoveryURL, fieldNumber: 7)
    }
    if !self.mfa.isEmpty {
      try visitor.visitRepeatedStringField(value: self.mfa, fieldNumber: 8)
    }
    if self.type != .unset {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 9)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 10)
    }
    if !self.scopes.isEmpty {
      try visitor.visitSingularStringField(value: self.scopes, fieldNumber: 11)
    }
    if self.purpose != .purposeUnknown {
      try visitor.visitSingularEnumField(value: self.purpose, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsResponse.Connection, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetConnectionsResponse.Connection) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.clientSecret != rhs.clientSecret {return false}
    if lhs.buttonImageURL != rhs.buttonImageURL {return false}
    if lhs.provider != rhs.provider {return false}
    if lhs.oidcDiscoveryURL != rhs.oidcDiscoveryURL {return false}
    if lhs.mfa != rhs.mfa {return false}
    if lhs.type != rhs.type {return false}
    if lhs.id != rhs.id {return false}
    if lhs.scopes != rhs.scopes {return false}
    if lhs.purpose != rhs.purpose {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateConnectionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateConnectionRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "client_id"),
    3: .standard(proto: "client_secret"),
    4: .standard(proto: "button_image_url"),
    6: .same(proto: "provider"),
    7: .standard(proto: "oidc_discovery_url"),
    8: .same(proto: "mfa"),
    9: .same(proto: "type"),
    10: .same(proto: "id"),
    11: .same(proto: "scopes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.clientSecret) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.buttonImageURL) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.provider) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.oidcDiscoveryURL) }()
      case 8: try { try decoder.decodeRepeatedStringField(value: &self.mfa) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.scopes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 2)
    }
    if !self.clientSecret.isEmpty {
      try visitor.visitSingularStringField(value: self.clientSecret, fieldNumber: 3)
    }
    if !self.buttonImageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.buttonImageURL, fieldNumber: 4)
    }
    if self.provider != .none {
      try visitor.visitSingularEnumField(value: self.provider, fieldNumber: 6)
    }
    if !self.oidcDiscoveryURL.isEmpty {
      try visitor.visitSingularStringField(value: self.oidcDiscoveryURL, fieldNumber: 7)
    }
    if !self.mfa.isEmpty {
      try visitor.visitRepeatedStringField(value: self.mfa, fieldNumber: 8)
    }
    if self.type != .unset {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 9)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 10)
    }
    if !self.scopes.isEmpty {
      try visitor.visitSingularStringField(value: self.scopes, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateConnectionRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateConnectionRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.clientSecret != rhs.clientSecret {return false}
    if lhs.buttonImageURL != rhs.buttonImageURL {return false}
    if lhs.provider != rhs.provider {return false}
    if lhs.oidcDiscoveryURL != rhs.oidcDiscoveryURL {return false}
    if lhs.mfa != rhs.mfa {return false}
    if lhs.type != rhs.type {return false}
    if lhs.id != rhs.id {return false}
    if lhs.scopes != rhs.scopes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateConnectionRequest.Providers: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "OPENID"),
    2: .same(proto: "AMAZON"),
    3: .same(proto: "BITBUCKET"),
    4: .same(proto: "BOX"),
    5: .same(proto: "DAILYMOTION"),
    6: .same(proto: "DEEZER"),
    7: .same(proto: "DIGITALOCEAN"),
    8: .same(proto: "DISCORD"),
    9: .same(proto: "DROPBOX"),
    10: .same(proto: "EVEONLINE"),
    11: .same(proto: "FACEBOOK"),
    12: .same(proto: "FITBIT"),
    13: .same(proto: "GITEA"),
    14: .same(proto: "GITHUB"),
    15: .same(proto: "GITLAB"),
    16: .same(proto: "GOOGLE"),
    18: .same(proto: "SHOPIFY"),
    19: .same(proto: "SOUNDCLOUD"),
    20: .same(proto: "SPOTIFY"),
    21: .same(proto: "STEAM"),
    22: .same(proto: "STRIPE"),
    23: .same(proto: "TWITCH"),
    24: .same(proto: "UBER"),
    25: .same(proto: "WEPAY"),
    26: .same(proto: "YAHOO"),
    27: .same(proto: "YAMMER"),
    28: .same(proto: "HEROKU"),
    29: .same(proto: "INSTAGRAM"),
    30: .same(proto: "INTERCOM"),
    31: .same(proto: "KAKAO"),
    32: .same(proto: "LASTFM"),
    33: .same(proto: "LINKEDIN"),
    34: .same(proto: "LINE"),
    35: .same(proto: "ONEDRIVE"),
    36: .same(proto: "AZUREAD"),
    37: .same(proto: "MICROSOFTONLINE"),
    38: .same(proto: "BATTLENET"),
    39: .same(proto: "PAYPAL"),
    40: .same(proto: "TWITTER"),
    41: .same(proto: "SALESFORCE"),
    42: .same(proto: "TYPETALK"),
    43: .same(proto: "SLACK"),
    44: .same(proto: "MEETUP"),
    46: .same(proto: "XERO"),
    47: .same(proto: "VK"),
    48: .same(proto: "NAVER"),
    49: .same(proto: "YANDEX"),
    50: .same(proto: "NEXTCLOUD"),
    52: .same(proto: "APPLE"),
    53: .same(proto: "STRAVA"),
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateConnectionRequest.Types: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "PASSWORD"),
    2: .same(proto: "OTP"),
    3: .same(proto: "TOTP"),
    4: .same(proto: "OIDC"),
  ]
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateConnectionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateConnectionResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateConnectionResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateConnectionResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_DeleteConnectionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteConnectionRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_DeleteConnectionRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_DeleteConnectionRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_DeleteConnectionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteConnectionResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_DeleteConnectionResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_DeleteConnectionResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetOAuth2ClientsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetOAuth2ClientsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetOAuth2ClientsRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetOAuth2ClientsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetOAuth2ClientsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetOAuth2ClientsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "clients"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.clients) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clients.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.clients, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetOAuth2ClientsResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetOAuth2ClientsResponse) -> Bool {
    if lhs.clients != rhs.clients {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetOAuth2ClientsResponse.Client: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Depot_Devtools_Auth_V0_Identity_Admin_GetOAuth2ClientsResponse.protoMessageName + ".Client"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "allowed_cors_origins"),
    2: .same(proto: "audience"),
    3: .standard(proto: "backchannel_logout_session_required"),
    4: .standard(proto: "backchannel_logout_uri"),
    5: .standard(proto: "client_id"),
    6: .standard(proto: "client_name"),
    7: .standard(proto: "client_secret_expires_at"),
    8: .standard(proto: "client_uri"),
    9: .same(proto: "contacts"),
    10: .standard(proto: "created_at"),
    11: .standard(proto: "frontchannel_logout_session_required"),
    12: .standard(proto: "frontchannel_logout_uri"),
    13: .standard(proto: "grant_types"),
    14: .same(proto: "jwks"),
    15: .standard(proto: "jwks_uri"),
    16: .standard(proto: "logo_uri"),
    17: .same(proto: "metadata"),
    18: .same(proto: "owner"),
    19: .standard(proto: "policy_uri"),
    20: .standard(proto: "post_logout_redirect_uris"),
    21: .standard(proto: "redirect_uris"),
    22: .standard(proto: "request_object_signing_alg"),
    23: .standard(proto: "request_uris"),
    24: .standard(proto: "response_types"),
    25: .same(proto: "scope"),
    26: .standard(proto: "sector_identifier_uri"),
    27: .standard(proto: "subject_type"),
    28: .standard(proto: "token_endpoint_auth_method"),
    29: .standard(proto: "token_endpoint_auth_signing_alg"),
    30: .standard(proto: "tos_uri"),
    31: .standard(proto: "updated_at"),
    32: .standard(proto: "userinfo_signed_response_alg"),
    33: .standard(proto: "client_type"),
  ]

  fileprivate class _StorageClass {
    var _allowedCorsOrigins: [String] = []
    var _audience: [String] = []
    var _backchannelLogoutSessionRequired: Bool = false
    var _backchannelLogoutUri: String = String()
    var _clientID: String = String()
    var _clientName: String = String()
    var _clientSecretExpiresAt: Int64 = 0
    var _clientUri: String = String()
    var _contacts: [String] = []
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _frontchannelLogoutSessionRequired: Bool = false
    var _frontchannelLogoutUri: String = String()
    var _grantTypes: [Depot_Devtools_Auth_V0_Identity_Admin_GrantType] = []
    var _jwks: SwiftProtobuf.Google_Protobuf_Struct? = nil
    var _jwksUri: String = String()
    var _logoUri: String = String()
    var _metadata: SwiftProtobuf.Google_Protobuf_Struct? = nil
    var _owner: String = String()
    var _policyUri: String = String()
    var _postLogoutRedirectUris: [String] = []
    var _redirectUris: [String] = []
    var _requestObjectSigningAlg: Depot_Devtools_Auth_V0_Identity_Admin_RequestObjectSigningAlg = .unset
    var _requestUris: [String] = []
    var _responseTypes: [Depot_Devtools_Auth_V0_Identity_Admin_ResponseType] = []
    var _scope: String = String()
    var _sectorIdentifierUri: String = String()
    var _subjectType: Depot_Devtools_Auth_V0_Identity_Admin_SubjectType = .public
    var _tokenEndpointAuthMethod: Depot_Devtools_Auth_V0_Identity_Admin_TokenEndpointAuthMethod = .clientSecretBasic
    var _tokenEndpointAuthSigningAlg: Depot_Devtools_Auth_V0_Identity_Admin_TokenEndpointAuthSigningAlg = .unset
    var _tosUri: String = String()
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _userinfoSignedResponseAlg: Depot_Devtools_Auth_V0_Identity_Admin_UserinfoSignedResponseAlg = .unset
    var _clientType: Depot_Devtools_Auth_V0_Identity_Admin_ClientType = .unset

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _allowedCorsOrigins = source._allowedCorsOrigins
      _audience = source._audience
      _backchannelLogoutSessionRequired = source._backchannelLogoutSessionRequired
      _backchannelLogoutUri = source._backchannelLogoutUri
      _clientID = source._clientID
      _clientName = source._clientName
      _clientSecretExpiresAt = source._clientSecretExpiresAt
      _clientUri = source._clientUri
      _contacts = source._contacts
      _createdAt = source._createdAt
      _frontchannelLogoutSessionRequired = source._frontchannelLogoutSessionRequired
      _frontchannelLogoutUri = source._frontchannelLogoutUri
      _grantTypes = source._grantTypes
      _jwks = source._jwks
      _jwksUri = source._jwksUri
      _logoUri = source._logoUri
      _metadata = source._metadata
      _owner = source._owner
      _policyUri = source._policyUri
      _postLogoutRedirectUris = source._postLogoutRedirectUris
      _redirectUris = source._redirectUris
      _requestObjectSigningAlg = source._requestObjectSigningAlg
      _requestUris = source._requestUris
      _responseTypes = source._responseTypes
      _scope = source._scope
      _sectorIdentifierUri = source._sectorIdentifierUri
      _subjectType = source._subjectType
      _tokenEndpointAuthMethod = source._tokenEndpointAuthMethod
      _tokenEndpointAuthSigningAlg = source._tokenEndpointAuthSigningAlg
      _tosUri = source._tosUri
      _updatedAt = source._updatedAt
      _userinfoSignedResponseAlg = source._userinfoSignedResponseAlg
      _clientType = source._clientType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedStringField(value: &_storage._allowedCorsOrigins) }()
        case 2: try { try decoder.decodeRepeatedStringField(value: &_storage._audience) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._backchannelLogoutSessionRequired) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._backchannelLogoutUri) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._clientID) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._clientName) }()
        case 7: try { try decoder.decodeSingularInt64Field(value: &_storage._clientSecretExpiresAt) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._clientUri) }()
        case 9: try { try decoder.decodeRepeatedStringField(value: &_storage._contacts) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._createdAt) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._frontchannelLogoutSessionRequired) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._frontchannelLogoutUri) }()
        case 13: try { try decoder.decodeRepeatedEnumField(value: &_storage._grantTypes) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._jwks) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._jwksUri) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._logoUri) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._metadata) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._owner) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._policyUri) }()
        case 20: try { try decoder.decodeRepeatedStringField(value: &_storage._postLogoutRedirectUris) }()
        case 21: try { try decoder.decodeRepeatedStringField(value: &_storage._redirectUris) }()
        case 22: try { try decoder.decodeSingularEnumField(value: &_storage._requestObjectSigningAlg) }()
        case 23: try { try decoder.decodeRepeatedStringField(value: &_storage._requestUris) }()
        case 24: try { try decoder.decodeRepeatedEnumField(value: &_storage._responseTypes) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._scope) }()
        case 26: try { try decoder.decodeSingularStringField(value: &_storage._sectorIdentifierUri) }()
        case 27: try { try decoder.decodeSingularEnumField(value: &_storage._subjectType) }()
        case 28: try { try decoder.decodeSingularEnumField(value: &_storage._tokenEndpointAuthMethod) }()
        case 29: try { try decoder.decodeSingularEnumField(value: &_storage._tokenEndpointAuthSigningAlg) }()
        case 30: try { try decoder.decodeSingularStringField(value: &_storage._tosUri) }()
        case 31: try { try decoder.decodeSingularMessageField(value: &_storage._updatedAt) }()
        case 32: try { try decoder.decodeSingularEnumField(value: &_storage._userinfoSignedResponseAlg) }()
        case 33: try { try decoder.decodeSingularEnumField(value: &_storage._clientType) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._allowedCorsOrigins.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._allowedCorsOrigins, fieldNumber: 1)
      }
      if !_storage._audience.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._audience, fieldNumber: 2)
      }
      if _storage._backchannelLogoutSessionRequired != false {
        try visitor.visitSingularBoolField(value: _storage._backchannelLogoutSessionRequired, fieldNumber: 3)
      }
      if !_storage._backchannelLogoutUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._backchannelLogoutUri, fieldNumber: 4)
      }
      if !_storage._clientID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._clientID, fieldNumber: 5)
      }
      if !_storage._clientName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._clientName, fieldNumber: 6)
      }
      if _storage._clientSecretExpiresAt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._clientSecretExpiresAt, fieldNumber: 7)
      }
      if !_storage._clientUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._clientUri, fieldNumber: 8)
      }
      if !_storage._contacts.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._contacts, fieldNumber: 9)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if _storage._frontchannelLogoutSessionRequired != false {
        try visitor.visitSingularBoolField(value: _storage._frontchannelLogoutSessionRequired, fieldNumber: 11)
      }
      if !_storage._frontchannelLogoutUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._frontchannelLogoutUri, fieldNumber: 12)
      }
      if !_storage._grantTypes.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._grantTypes, fieldNumber: 13)
      }
      if let v = _storage._jwks {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if !_storage._jwksUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jwksUri, fieldNumber: 15)
      }
      if !_storage._logoUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._logoUri, fieldNumber: 16)
      }
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if !_storage._owner.isEmpty {
        try visitor.visitSingularStringField(value: _storage._owner, fieldNumber: 18)
      }
      if !_storage._policyUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._policyUri, fieldNumber: 19)
      }
      if !_storage._postLogoutRedirectUris.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._postLogoutRedirectUris, fieldNumber: 20)
      }
      if !_storage._redirectUris.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._redirectUris, fieldNumber: 21)
      }
      if _storage._requestObjectSigningAlg != .unset {
        try visitor.visitSingularEnumField(value: _storage._requestObjectSigningAlg, fieldNumber: 22)
      }
      if !_storage._requestUris.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._requestUris, fieldNumber: 23)
      }
      if !_storage._responseTypes.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._responseTypes, fieldNumber: 24)
      }
      if !_storage._scope.isEmpty {
        try visitor.visitSingularStringField(value: _storage._scope, fieldNumber: 25)
      }
      if !_storage._sectorIdentifierUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sectorIdentifierUri, fieldNumber: 26)
      }
      if _storage._subjectType != .public {
        try visitor.visitSingularEnumField(value: _storage._subjectType, fieldNumber: 27)
      }
      if _storage._tokenEndpointAuthMethod != .clientSecretBasic {
        try visitor.visitSingularEnumField(value: _storage._tokenEndpointAuthMethod, fieldNumber: 28)
      }
      if _storage._tokenEndpointAuthSigningAlg != .unset {
        try visitor.visitSingularEnumField(value: _storage._tokenEndpointAuthSigningAlg, fieldNumber: 29)
      }
      if !_storage._tosUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tosUri, fieldNumber: 30)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      }
      if _storage._userinfoSignedResponseAlg != .unset {
        try visitor.visitSingularEnumField(value: _storage._userinfoSignedResponseAlg, fieldNumber: 32)
      }
      if _storage._clientType != .unset {
        try visitor.visitSingularEnumField(value: _storage._clientType, fieldNumber: 33)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetOAuth2ClientsResponse.Client, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetOAuth2ClientsResponse.Client) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._allowedCorsOrigins != rhs_storage._allowedCorsOrigins {return false}
        if _storage._audience != rhs_storage._audience {return false}
        if _storage._backchannelLogoutSessionRequired != rhs_storage._backchannelLogoutSessionRequired {return false}
        if _storage._backchannelLogoutUri != rhs_storage._backchannelLogoutUri {return false}
        if _storage._clientID != rhs_storage._clientID {return false}
        if _storage._clientName != rhs_storage._clientName {return false}
        if _storage._clientSecretExpiresAt != rhs_storage._clientSecretExpiresAt {return false}
        if _storage._clientUri != rhs_storage._clientUri {return false}
        if _storage._contacts != rhs_storage._contacts {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._frontchannelLogoutSessionRequired != rhs_storage._frontchannelLogoutSessionRequired {return false}
        if _storage._frontchannelLogoutUri != rhs_storage._frontchannelLogoutUri {return false}
        if _storage._grantTypes != rhs_storage._grantTypes {return false}
        if _storage._jwks != rhs_storage._jwks {return false}
        if _storage._jwksUri != rhs_storage._jwksUri {return false}
        if _storage._logoUri != rhs_storage._logoUri {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._owner != rhs_storage._owner {return false}
        if _storage._policyUri != rhs_storage._policyUri {return false}
        if _storage._postLogoutRedirectUris != rhs_storage._postLogoutRedirectUris {return false}
        if _storage._redirectUris != rhs_storage._redirectUris {return false}
        if _storage._requestObjectSigningAlg != rhs_storage._requestObjectSigningAlg {return false}
        if _storage._requestUris != rhs_storage._requestUris {return false}
        if _storage._responseTypes != rhs_storage._responseTypes {return false}
        if _storage._scope != rhs_storage._scope {return false}
        if _storage._sectorIdentifierUri != rhs_storage._sectorIdentifierUri {return false}
        if _storage._subjectType != rhs_storage._subjectType {return false}
        if _storage._tokenEndpointAuthMethod != rhs_storage._tokenEndpointAuthMethod {return false}
        if _storage._tokenEndpointAuthSigningAlg != rhs_storage._tokenEndpointAuthSigningAlg {return false}
        if _storage._tosUri != rhs_storage._tosUri {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._userinfoSignedResponseAlg != rhs_storage._userinfoSignedResponseAlg {return false}
        if _storage._clientType != rhs_storage._clientType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_CreateOAuth2ClientRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateOAuth2ClientRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "allowed_cors_origins"),
    2: .same(proto: "audience"),
    3: .standard(proto: "backchannel_logout_session_required"),
    4: .standard(proto: "backchannel_logout_uri"),
    6: .standard(proto: "client_name"),
    8: .standard(proto: "client_uri"),
    9: .same(proto: "contacts"),
    11: .standard(proto: "frontchannel_logout_session_required"),
    12: .standard(proto: "frontchannel_logout_uri"),
    13: .standard(proto: "grant_types"),
    14: .same(proto: "jwks"),
    15: .standard(proto: "jwks_uri"),
    16: .standard(proto: "logo_uri"),
    17: .same(proto: "metadata"),
    18: .same(proto: "owner"),
    19: .standard(proto: "policy_uri"),
    20: .standard(proto: "post_logout_redirect_uris"),
    21: .standard(proto: "redirect_uris"),
    22: .standard(proto: "request_object_signing_alg"),
    23: .standard(proto: "request_uris"),
    24: .standard(proto: "response_types"),
    25: .same(proto: "scope"),
    26: .standard(proto: "sector_identifier_uri"),
    27: .standard(proto: "subject_type"),
    28: .standard(proto: "token_endpoint_auth_method"),
    29: .standard(proto: "token_endpoint_auth_signing_alg"),
    30: .standard(proto: "tos_uri"),
    31: .standard(proto: "userinfo_signed_response_alg"),
    32: .standard(proto: "client_secret"),
    33: .standard(proto: "client_type"),
  ]

  fileprivate class _StorageClass {
    var _allowedCorsOrigins: [String] = []
    var _audience: [String] = []
    var _backchannelLogoutSessionRequired: Bool = false
    var _backchannelLogoutUri: String = String()
    var _clientName: String = String()
    var _clientUri: String = String()
    var _contacts: [String] = []
    var _frontchannelLogoutSessionRequired: Bool = false
    var _frontchannelLogoutUri: String = String()
    var _grantTypes: [Depot_Devtools_Auth_V0_Identity_Admin_GrantType] = []
    var _jwks: SwiftProtobuf.Google_Protobuf_Struct? = nil
    var _jwksUri: String = String()
    var _logoUri: String = String()
    var _metadata: SwiftProtobuf.Google_Protobuf_Struct? = nil
    var _owner: String = String()
    var _policyUri: String = String()
    var _postLogoutRedirectUris: [String] = []
    var _redirectUris: [String] = []
    var _requestObjectSigningAlg: Depot_Devtools_Auth_V0_Identity_Admin_RequestObjectSigningAlg = .unset
    var _requestUris: [String] = []
    var _responseTypes: [Depot_Devtools_Auth_V0_Identity_Admin_ResponseType] = []
    var _scope: String = String()
    var _sectorIdentifierUri: String = String()
    var _subjectType: Depot_Devtools_Auth_V0_Identity_Admin_SubjectType = .public
    var _tokenEndpointAuthMethod: Depot_Devtools_Auth_V0_Identity_Admin_TokenEndpointAuthMethod = .clientSecretBasic
    var _tokenEndpointAuthSigningAlg: Depot_Devtools_Auth_V0_Identity_Admin_TokenEndpointAuthSigningAlg = .unset
    var _tosUri: String = String()
    var _userinfoSignedResponseAlg: Depot_Devtools_Auth_V0_Identity_Admin_UserinfoSignedResponseAlg = .unset
    var _clientSecret: String = String()
    var _clientType: Depot_Devtools_Auth_V0_Identity_Admin_ClientType = .unset

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _allowedCorsOrigins = source._allowedCorsOrigins
      _audience = source._audience
      _backchannelLogoutSessionRequired = source._backchannelLogoutSessionRequired
      _backchannelLogoutUri = source._backchannelLogoutUri
      _clientName = source._clientName
      _clientUri = source._clientUri
      _contacts = source._contacts
      _frontchannelLogoutSessionRequired = source._frontchannelLogoutSessionRequired
      _frontchannelLogoutUri = source._frontchannelLogoutUri
      _grantTypes = source._grantTypes
      _jwks = source._jwks
      _jwksUri = source._jwksUri
      _logoUri = source._logoUri
      _metadata = source._metadata
      _owner = source._owner
      _policyUri = source._policyUri
      _postLogoutRedirectUris = source._postLogoutRedirectUris
      _redirectUris = source._redirectUris
      _requestObjectSigningAlg = source._requestObjectSigningAlg
      _requestUris = source._requestUris
      _responseTypes = source._responseTypes
      _scope = source._scope
      _sectorIdentifierUri = source._sectorIdentifierUri
      _subjectType = source._subjectType
      _tokenEndpointAuthMethod = source._tokenEndpointAuthMethod
      _tokenEndpointAuthSigningAlg = source._tokenEndpointAuthSigningAlg
      _tosUri = source._tosUri
      _userinfoSignedResponseAlg = source._userinfoSignedResponseAlg
      _clientSecret = source._clientSecret
      _clientType = source._clientType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedStringField(value: &_storage._allowedCorsOrigins) }()
        case 2: try { try decoder.decodeRepeatedStringField(value: &_storage._audience) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._backchannelLogoutSessionRequired) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._backchannelLogoutUri) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._clientName) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._clientUri) }()
        case 9: try { try decoder.decodeRepeatedStringField(value: &_storage._contacts) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._frontchannelLogoutSessionRequired) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._frontchannelLogoutUri) }()
        case 13: try { try decoder.decodeRepeatedEnumField(value: &_storage._grantTypes) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._jwks) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._jwksUri) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._logoUri) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._metadata) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._owner) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._policyUri) }()
        case 20: try { try decoder.decodeRepeatedStringField(value: &_storage._postLogoutRedirectUris) }()
        case 21: try { try decoder.decodeRepeatedStringField(value: &_storage._redirectUris) }()
        case 22: try { try decoder.decodeSingularEnumField(value: &_storage._requestObjectSigningAlg) }()
        case 23: try { try decoder.decodeRepeatedStringField(value: &_storage._requestUris) }()
        case 24: try { try decoder.decodeRepeatedEnumField(value: &_storage._responseTypes) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._scope) }()
        case 26: try { try decoder.decodeSingularStringField(value: &_storage._sectorIdentifierUri) }()
        case 27: try { try decoder.decodeSingularEnumField(value: &_storage._subjectType) }()
        case 28: try { try decoder.decodeSingularEnumField(value: &_storage._tokenEndpointAuthMethod) }()
        case 29: try { try decoder.decodeSingularEnumField(value: &_storage._tokenEndpointAuthSigningAlg) }()
        case 30: try { try decoder.decodeSingularStringField(value: &_storage._tosUri) }()
        case 31: try { try decoder.decodeSingularEnumField(value: &_storage._userinfoSignedResponseAlg) }()
        case 32: try { try decoder.decodeSingularStringField(value: &_storage._clientSecret) }()
        case 33: try { try decoder.decodeSingularEnumField(value: &_storage._clientType) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._allowedCorsOrigins.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._allowedCorsOrigins, fieldNumber: 1)
      }
      if !_storage._audience.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._audience, fieldNumber: 2)
      }
      if _storage._backchannelLogoutSessionRequired != false {
        try visitor.visitSingularBoolField(value: _storage._backchannelLogoutSessionRequired, fieldNumber: 3)
      }
      if !_storage._backchannelLogoutUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._backchannelLogoutUri, fieldNumber: 4)
      }
      if !_storage._clientName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._clientName, fieldNumber: 6)
      }
      if !_storage._clientUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._clientUri, fieldNumber: 8)
      }
      if !_storage._contacts.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._contacts, fieldNumber: 9)
      }
      if _storage._frontchannelLogoutSessionRequired != false {
        try visitor.visitSingularBoolField(value: _storage._frontchannelLogoutSessionRequired, fieldNumber: 11)
      }
      if !_storage._frontchannelLogoutUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._frontchannelLogoutUri, fieldNumber: 12)
      }
      if !_storage._grantTypes.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._grantTypes, fieldNumber: 13)
      }
      if let v = _storage._jwks {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if !_storage._jwksUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jwksUri, fieldNumber: 15)
      }
      if !_storage._logoUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._logoUri, fieldNumber: 16)
      }
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if !_storage._owner.isEmpty {
        try visitor.visitSingularStringField(value: _storage._owner, fieldNumber: 18)
      }
      if !_storage._policyUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._policyUri, fieldNumber: 19)
      }
      if !_storage._postLogoutRedirectUris.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._postLogoutRedirectUris, fieldNumber: 20)
      }
      if !_storage._redirectUris.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._redirectUris, fieldNumber: 21)
      }
      if _storage._requestObjectSigningAlg != .unset {
        try visitor.visitSingularEnumField(value: _storage._requestObjectSigningAlg, fieldNumber: 22)
      }
      if !_storage._requestUris.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._requestUris, fieldNumber: 23)
      }
      if !_storage._responseTypes.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._responseTypes, fieldNumber: 24)
      }
      if !_storage._scope.isEmpty {
        try visitor.visitSingularStringField(value: _storage._scope, fieldNumber: 25)
      }
      if !_storage._sectorIdentifierUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sectorIdentifierUri, fieldNumber: 26)
      }
      if _storage._subjectType != .public {
        try visitor.visitSingularEnumField(value: _storage._subjectType, fieldNumber: 27)
      }
      if _storage._tokenEndpointAuthMethod != .clientSecretBasic {
        try visitor.visitSingularEnumField(value: _storage._tokenEndpointAuthMethod, fieldNumber: 28)
      }
      if _storage._tokenEndpointAuthSigningAlg != .unset {
        try visitor.visitSingularEnumField(value: _storage._tokenEndpointAuthSigningAlg, fieldNumber: 29)
      }
      if !_storage._tosUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tosUri, fieldNumber: 30)
      }
      if _storage._userinfoSignedResponseAlg != .unset {
        try visitor.visitSingularEnumField(value: _storage._userinfoSignedResponseAlg, fieldNumber: 31)
      }
      if !_storage._clientSecret.isEmpty {
        try visitor.visitSingularStringField(value: _storage._clientSecret, fieldNumber: 32)
      }
      if _storage._clientType != .unset {
        try visitor.visitSingularEnumField(value: _storage._clientType, fieldNumber: 33)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_CreateOAuth2ClientRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_CreateOAuth2ClientRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._allowedCorsOrigins != rhs_storage._allowedCorsOrigins {return false}
        if _storage._audience != rhs_storage._audience {return false}
        if _storage._backchannelLogoutSessionRequired != rhs_storage._backchannelLogoutSessionRequired {return false}
        if _storage._backchannelLogoutUri != rhs_storage._backchannelLogoutUri {return false}
        if _storage._clientName != rhs_storage._clientName {return false}
        if _storage._clientUri != rhs_storage._clientUri {return false}
        if _storage._contacts != rhs_storage._contacts {return false}
        if _storage._frontchannelLogoutSessionRequired != rhs_storage._frontchannelLogoutSessionRequired {return false}
        if _storage._frontchannelLogoutUri != rhs_storage._frontchannelLogoutUri {return false}
        if _storage._grantTypes != rhs_storage._grantTypes {return false}
        if _storage._jwks != rhs_storage._jwks {return false}
        if _storage._jwksUri != rhs_storage._jwksUri {return false}
        if _storage._logoUri != rhs_storage._logoUri {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._owner != rhs_storage._owner {return false}
        if _storage._policyUri != rhs_storage._policyUri {return false}
        if _storage._postLogoutRedirectUris != rhs_storage._postLogoutRedirectUris {return false}
        if _storage._redirectUris != rhs_storage._redirectUris {return false}
        if _storage._requestObjectSigningAlg != rhs_storage._requestObjectSigningAlg {return false}
        if _storage._requestUris != rhs_storage._requestUris {return false}
        if _storage._responseTypes != rhs_storage._responseTypes {return false}
        if _storage._scope != rhs_storage._scope {return false}
        if _storage._sectorIdentifierUri != rhs_storage._sectorIdentifierUri {return false}
        if _storage._subjectType != rhs_storage._subjectType {return false}
        if _storage._tokenEndpointAuthMethod != rhs_storage._tokenEndpointAuthMethod {return false}
        if _storage._tokenEndpointAuthSigningAlg != rhs_storage._tokenEndpointAuthSigningAlg {return false}
        if _storage._tosUri != rhs_storage._tosUri {return false}
        if _storage._userinfoSignedResponseAlg != rhs_storage._userinfoSignedResponseAlg {return false}
        if _storage._clientSecret != rhs_storage._clientSecret {return false}
        if _storage._clientType != rhs_storage._clientType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_CreateOAuth2ClientResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateOAuth2ClientResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_id"),
    2: .standard(proto: "client_secret"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.clientSecret) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 1)
    }
    if !self.clientSecret.isEmpty {
      try visitor.visitSingularStringField(value: self.clientSecret, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_CreateOAuth2ClientResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_CreateOAuth2ClientResponse) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.clientSecret != rhs.clientSecret {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateOAuth2ClientRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateOAuth2ClientRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "allowed_cors_origins"),
    2: .same(proto: "audience"),
    3: .standard(proto: "backchannel_logout_session_required"),
    4: .standard(proto: "backchannel_logout_uri"),
    6: .standard(proto: "client_name"),
    8: .standard(proto: "client_uri"),
    9: .same(proto: "contacts"),
    11: .standard(proto: "frontchannel_logout_session_required"),
    12: .standard(proto: "frontchannel_logout_uri"),
    13: .standard(proto: "grant_types"),
    14: .same(proto: "jwks"),
    15: .standard(proto: "jwks_uri"),
    16: .standard(proto: "logo_uri"),
    17: .same(proto: "metadata"),
    18: .same(proto: "owner"),
    19: .standard(proto: "policy_uri"),
    20: .standard(proto: "post_logout_redirect_uris"),
    21: .standard(proto: "redirect_uris"),
    22: .standard(proto: "request_object_signing_alg"),
    23: .standard(proto: "request_uris"),
    24: .standard(proto: "response_types"),
    25: .same(proto: "scope"),
    26: .standard(proto: "sector_identifier_uri"),
    27: .standard(proto: "subject_type"),
    28: .standard(proto: "token_endpoint_auth_method"),
    29: .standard(proto: "token_endpoint_auth_signing_alg"),
    30: .standard(proto: "tos_uri"),
    31: .standard(proto: "userinfo_signed_response_alg"),
    32: .standard(proto: "client_secret"),
    33: .standard(proto: "client_id"),
  ]

  fileprivate class _StorageClass {
    var _allowedCorsOrigins: [String] = []
    var _audience: [String] = []
    var _backchannelLogoutSessionRequired: Bool = false
    var _backchannelLogoutUri: String = String()
    var _clientName: String = String()
    var _clientUri: String = String()
    var _contacts: [String] = []
    var _frontchannelLogoutSessionRequired: Bool = false
    var _frontchannelLogoutUri: String = String()
    var _grantTypes: [Depot_Devtools_Auth_V0_Identity_Admin_GrantType] = []
    var _jwks: SwiftProtobuf.Google_Protobuf_Struct? = nil
    var _jwksUri: String = String()
    var _logoUri: String = String()
    var _metadata: SwiftProtobuf.Google_Protobuf_Struct? = nil
    var _owner: String = String()
    var _policyUri: String = String()
    var _postLogoutRedirectUris: [String] = []
    var _redirectUris: [String] = []
    var _requestObjectSigningAlg: Depot_Devtools_Auth_V0_Identity_Admin_RequestObjectSigningAlg = .unset
    var _requestUris: [String] = []
    var _responseTypes: [Depot_Devtools_Auth_V0_Identity_Admin_ResponseType] = []
    var _scope: String = String()
    var _sectorIdentifierUri: String = String()
    var _subjectType: Depot_Devtools_Auth_V0_Identity_Admin_SubjectType = .public
    var _tokenEndpointAuthMethod: Depot_Devtools_Auth_V0_Identity_Admin_TokenEndpointAuthMethod = .clientSecretBasic
    var _tokenEndpointAuthSigningAlg: Depot_Devtools_Auth_V0_Identity_Admin_TokenEndpointAuthSigningAlg = .unset
    var _tosUri: String = String()
    var _userinfoSignedResponseAlg: Depot_Devtools_Auth_V0_Identity_Admin_UserinfoSignedResponseAlg = .unset
    var _clientSecret: String = String()
    var _clientID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _allowedCorsOrigins = source._allowedCorsOrigins
      _audience = source._audience
      _backchannelLogoutSessionRequired = source._backchannelLogoutSessionRequired
      _backchannelLogoutUri = source._backchannelLogoutUri
      _clientName = source._clientName
      _clientUri = source._clientUri
      _contacts = source._contacts
      _frontchannelLogoutSessionRequired = source._frontchannelLogoutSessionRequired
      _frontchannelLogoutUri = source._frontchannelLogoutUri
      _grantTypes = source._grantTypes
      _jwks = source._jwks
      _jwksUri = source._jwksUri
      _logoUri = source._logoUri
      _metadata = source._metadata
      _owner = source._owner
      _policyUri = source._policyUri
      _postLogoutRedirectUris = source._postLogoutRedirectUris
      _redirectUris = source._redirectUris
      _requestObjectSigningAlg = source._requestObjectSigningAlg
      _requestUris = source._requestUris
      _responseTypes = source._responseTypes
      _scope = source._scope
      _sectorIdentifierUri = source._sectorIdentifierUri
      _subjectType = source._subjectType
      _tokenEndpointAuthMethod = source._tokenEndpointAuthMethod
      _tokenEndpointAuthSigningAlg = source._tokenEndpointAuthSigningAlg
      _tosUri = source._tosUri
      _userinfoSignedResponseAlg = source._userinfoSignedResponseAlg
      _clientSecret = source._clientSecret
      _clientID = source._clientID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedStringField(value: &_storage._allowedCorsOrigins) }()
        case 2: try { try decoder.decodeRepeatedStringField(value: &_storage._audience) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._backchannelLogoutSessionRequired) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._backchannelLogoutUri) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._clientName) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._clientUri) }()
        case 9: try { try decoder.decodeRepeatedStringField(value: &_storage._contacts) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._frontchannelLogoutSessionRequired) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._frontchannelLogoutUri) }()
        case 13: try { try decoder.decodeRepeatedEnumField(value: &_storage._grantTypes) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._jwks) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._jwksUri) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._logoUri) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._metadata) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._owner) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._policyUri) }()
        case 20: try { try decoder.decodeRepeatedStringField(value: &_storage._postLogoutRedirectUris) }()
        case 21: try { try decoder.decodeRepeatedStringField(value: &_storage._redirectUris) }()
        case 22: try { try decoder.decodeSingularEnumField(value: &_storage._requestObjectSigningAlg) }()
        case 23: try { try decoder.decodeRepeatedStringField(value: &_storage._requestUris) }()
        case 24: try { try decoder.decodeRepeatedEnumField(value: &_storage._responseTypes) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._scope) }()
        case 26: try { try decoder.decodeSingularStringField(value: &_storage._sectorIdentifierUri) }()
        case 27: try { try decoder.decodeSingularEnumField(value: &_storage._subjectType) }()
        case 28: try { try decoder.decodeSingularEnumField(value: &_storage._tokenEndpointAuthMethod) }()
        case 29: try { try decoder.decodeSingularEnumField(value: &_storage._tokenEndpointAuthSigningAlg) }()
        case 30: try { try decoder.decodeSingularStringField(value: &_storage._tosUri) }()
        case 31: try { try decoder.decodeSingularEnumField(value: &_storage._userinfoSignedResponseAlg) }()
        case 32: try { try decoder.decodeSingularStringField(value: &_storage._clientSecret) }()
        case 33: try { try decoder.decodeSingularStringField(value: &_storage._clientID) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._allowedCorsOrigins.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._allowedCorsOrigins, fieldNumber: 1)
      }
      if !_storage._audience.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._audience, fieldNumber: 2)
      }
      if _storage._backchannelLogoutSessionRequired != false {
        try visitor.visitSingularBoolField(value: _storage._backchannelLogoutSessionRequired, fieldNumber: 3)
      }
      if !_storage._backchannelLogoutUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._backchannelLogoutUri, fieldNumber: 4)
      }
      if !_storage._clientName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._clientName, fieldNumber: 6)
      }
      if !_storage._clientUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._clientUri, fieldNumber: 8)
      }
      if !_storage._contacts.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._contacts, fieldNumber: 9)
      }
      if _storage._frontchannelLogoutSessionRequired != false {
        try visitor.visitSingularBoolField(value: _storage._frontchannelLogoutSessionRequired, fieldNumber: 11)
      }
      if !_storage._frontchannelLogoutUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._frontchannelLogoutUri, fieldNumber: 12)
      }
      if !_storage._grantTypes.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._grantTypes, fieldNumber: 13)
      }
      if let v = _storage._jwks {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if !_storage._jwksUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jwksUri, fieldNumber: 15)
      }
      if !_storage._logoUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._logoUri, fieldNumber: 16)
      }
      if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if !_storage._owner.isEmpty {
        try visitor.visitSingularStringField(value: _storage._owner, fieldNumber: 18)
      }
      if !_storage._policyUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._policyUri, fieldNumber: 19)
      }
      if !_storage._postLogoutRedirectUris.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._postLogoutRedirectUris, fieldNumber: 20)
      }
      if !_storage._redirectUris.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._redirectUris, fieldNumber: 21)
      }
      if _storage._requestObjectSigningAlg != .unset {
        try visitor.visitSingularEnumField(value: _storage._requestObjectSigningAlg, fieldNumber: 22)
      }
      if !_storage._requestUris.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._requestUris, fieldNumber: 23)
      }
      if !_storage._responseTypes.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._responseTypes, fieldNumber: 24)
      }
      if !_storage._scope.isEmpty {
        try visitor.visitSingularStringField(value: _storage._scope, fieldNumber: 25)
      }
      if !_storage._sectorIdentifierUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sectorIdentifierUri, fieldNumber: 26)
      }
      if _storage._subjectType != .public {
        try visitor.visitSingularEnumField(value: _storage._subjectType, fieldNumber: 27)
      }
      if _storage._tokenEndpointAuthMethod != .clientSecretBasic {
        try visitor.visitSingularEnumField(value: _storage._tokenEndpointAuthMethod, fieldNumber: 28)
      }
      if _storage._tokenEndpointAuthSigningAlg != .unset {
        try visitor.visitSingularEnumField(value: _storage._tokenEndpointAuthSigningAlg, fieldNumber: 29)
      }
      if !_storage._tosUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tosUri, fieldNumber: 30)
      }
      if _storage._userinfoSignedResponseAlg != .unset {
        try visitor.visitSingularEnumField(value: _storage._userinfoSignedResponseAlg, fieldNumber: 31)
      }
      if !_storage._clientSecret.isEmpty {
        try visitor.visitSingularStringField(value: _storage._clientSecret, fieldNumber: 32)
      }
      if !_storage._clientID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._clientID, fieldNumber: 33)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateOAuth2ClientRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateOAuth2ClientRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._allowedCorsOrigins != rhs_storage._allowedCorsOrigins {return false}
        if _storage._audience != rhs_storage._audience {return false}
        if _storage._backchannelLogoutSessionRequired != rhs_storage._backchannelLogoutSessionRequired {return false}
        if _storage._backchannelLogoutUri != rhs_storage._backchannelLogoutUri {return false}
        if _storage._clientName != rhs_storage._clientName {return false}
        if _storage._clientUri != rhs_storage._clientUri {return false}
        if _storage._contacts != rhs_storage._contacts {return false}
        if _storage._frontchannelLogoutSessionRequired != rhs_storage._frontchannelLogoutSessionRequired {return false}
        if _storage._frontchannelLogoutUri != rhs_storage._frontchannelLogoutUri {return false}
        if _storage._grantTypes != rhs_storage._grantTypes {return false}
        if _storage._jwks != rhs_storage._jwks {return false}
        if _storage._jwksUri != rhs_storage._jwksUri {return false}
        if _storage._logoUri != rhs_storage._logoUri {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._owner != rhs_storage._owner {return false}
        if _storage._policyUri != rhs_storage._policyUri {return false}
        if _storage._postLogoutRedirectUris != rhs_storage._postLogoutRedirectUris {return false}
        if _storage._redirectUris != rhs_storage._redirectUris {return false}
        if _storage._requestObjectSigningAlg != rhs_storage._requestObjectSigningAlg {return false}
        if _storage._requestUris != rhs_storage._requestUris {return false}
        if _storage._responseTypes != rhs_storage._responseTypes {return false}
        if _storage._scope != rhs_storage._scope {return false}
        if _storage._sectorIdentifierUri != rhs_storage._sectorIdentifierUri {return false}
        if _storage._subjectType != rhs_storage._subjectType {return false}
        if _storage._tokenEndpointAuthMethod != rhs_storage._tokenEndpointAuthMethod {return false}
        if _storage._tokenEndpointAuthSigningAlg != rhs_storage._tokenEndpointAuthSigningAlg {return false}
        if _storage._tosUri != rhs_storage._tosUri {return false}
        if _storage._userinfoSignedResponseAlg != rhs_storage._userinfoSignedResponseAlg {return false}
        if _storage._clientSecret != rhs_storage._clientSecret {return false}
        if _storage._clientID != rhs_storage._clientID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateOAuth2ClientResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateOAuth2ClientResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_id"),
    2: .standard(proto: "client_secret"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.clientSecret) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 1)
    }
    if !self.clientSecret.isEmpty {
      try visitor.visitSingularStringField(value: self.clientSecret, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateOAuth2ClientResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateOAuth2ClientResponse) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.clientSecret != rhs.clientSecret {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_DeleteOAuth2ClientRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteOAuth2ClientRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_DeleteOAuth2ClientRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_DeleteOAuth2ClientRequest) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_DeleteOAuth2ClientResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteOAuth2ClientResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_DeleteOAuth2ClientResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_DeleteOAuth2ClientResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetAddressesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAddressesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "identity_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.identityID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identityID.isEmpty {
      try visitor.visitSingularStringField(value: self.identityID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetAddressesRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetAddressesRequest) -> Bool {
    if lhs.identityID != rhs.identityID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetAddressesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAddressesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "addresses"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.addresses) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.addresses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.addresses, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetAddressesResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetAddressesResponse) -> Bool {
    if lhs.addresses != rhs.addresses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetAddressesResponse.Address: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Depot_Devtools_Auth_V0_Identity_Admin_GetAddressesResponse.protoMessageName + ".Address"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "identity_id"),
    3: .same(proto: "name"),
    4: .same(proto: "address"),
    5: .same(proto: "verified"),
    6: .standard(proto: "id_schema_key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.identityID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.verified) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.idSchemaKey) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.identityID.isEmpty {
      try visitor.visitSingularStringField(value: self.identityID, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 4)
    }
    if self.verified != false {
      try visitor.visitSingularBoolField(value: self.verified, fieldNumber: 5)
    }
    if !self.idSchemaKey.isEmpty {
      try visitor.visitSingularStringField(value: self.idSchemaKey, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetAddressesResponse.Address, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetAddressesResponse.Address) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.identityID != rhs.identityID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.address != rhs.address {return false}
    if lhs.verified != rhs.verified {return false}
    if lhs.idSchemaKey != rhs.idSchemaKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetAddressRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAddressRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "verification"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.match != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.match = .id(v)}
      }()
      case 2: try {
        if self.match != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.match = .verification(v)}
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.match {
    case .id?: try {
      guard case .id(let v)? = self.match else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }()
    case .verification?: try {
      guard case .verification(let v)? = self.match else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetAddressRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetAddressRequest) -> Bool {
    if lhs.match != rhs.match {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetAddressResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAddressResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "identity_id"),
    3: .same(proto: "name"),
    4: .same(proto: "address"),
    5: .same(proto: "verified"),
    6: .standard(proto: "id_schema_key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.identityID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.verified) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.idSchemaKey) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.identityID.isEmpty {
      try visitor.visitSingularStringField(value: self.identityID, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 4)
    }
    if self.verified != false {
      try visitor.visitSingularBoolField(value: self.verified, fieldNumber: 5)
    }
    if !self.idSchemaKey.isEmpty {
      try visitor.visitSingularStringField(value: self.idSchemaKey, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetAddressResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetAddressResponse) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.identityID != rhs.identityID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.address != rhs.address {return false}
    if lhs.verified != rhs.verified {return false}
    if lhs.idSchemaKey != rhs.idSchemaKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateAddressRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateAddressRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "verified"),
    3: .same(proto: "address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try {
        if self.attribute != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.attribute = .verified(v)}
      }()
      case 3: try {
        if self.attribute != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.attribute = .address(v)}
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.attribute {
    case .verified?: try {
      guard case .verified(let v)? = self.attribute else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }()
    case .address?: try {
      guard case .address(let v)? = self.attribute else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateAddressRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateAddressRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.attribute != rhs.attribute {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateAddressResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateAddressResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateAddressResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateAddressResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetTraitsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTraitsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "identity_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.identityID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identityID.isEmpty {
      try visitor.visitSingularStringField(value: self.identityID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetTraitsRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetTraitsRequest) -> Bool {
    if lhs.identityID != rhs.identityID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetTraitsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTraitsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "traits"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.traits) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.traits.isEmpty {
      try visitor.visitSingularStringField(value: self.traits, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetTraitsResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetTraitsResponse) -> Bool {
    if lhs.traits != rhs.traits {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateTraitsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateTraitsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "identity_id"),
    2: .same(proto: "traits"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.identityID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.traits) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identityID.isEmpty {
      try visitor.visitSingularStringField(value: self.identityID, fieldNumber: 1)
    }
    if !self.traits.isEmpty {
      try visitor.visitSingularStringField(value: self.traits, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateTraitsRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateTraitsRequest) -> Bool {
    if lhs.identityID != rhs.identityID {return false}
    if lhs.traits != rhs.traits {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateTraitsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateTraitsResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateTraitsResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateTraitsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityLoginAttemptsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetIdentityLoginAttemptsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "identity_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.identityID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identityID.isEmpty {
      try visitor.visitSingularStringField(value: self.identityID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityLoginAttemptsRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityLoginAttemptsRequest) -> Bool {
    if lhs.identityID != rhs.identityID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityLoginAttemptsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetIdentityLoginAttemptsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "attempts"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.attempts) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.attempts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attempts, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityLoginAttemptsResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityLoginAttemptsResponse) -> Bool {
    if lhs.attempts != rhs.attempts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityLoginAttemptsResponse.Attempt: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityLoginAttemptsResponse.protoMessageName + ".Attempt"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "identity_id"),
    3: .same(proto: "status"),
    4: .standard(proto: "authentication_methods"),
    5: .standard(proto: "created_at"),
    6: .standard(proto: "expires_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.identityID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.status) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.authenticationMethods) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._expiresAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.identityID.isEmpty {
      try visitor.visitSingularStringField(value: self.identityID, fieldNumber: 2)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 3)
    }
    if !self.authenticationMethods.isEmpty {
      try visitor.visitRepeatedStringField(value: self.authenticationMethods, fieldNumber: 4)
    }
    if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._expiresAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityLoginAttemptsResponse.Attempt, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdentityLoginAttemptsResponse.Attempt) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.identityID != rhs.identityID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.authenticationMethods != rhs.authenticationMethods {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs._expiresAt != rhs._expiresAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_CreateIdSchemaRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateIdSchemaRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "content"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._content) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._content {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_CreateIdSchemaRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_CreateIdSchemaRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._content != rhs._content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_CreateIdSchemaResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateIdSchemaResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_CreateIdSchemaResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_CreateIdSchemaResponse) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetIdSchemasRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetIdSchemasRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdSchemasRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdSchemasRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetIdSchemasResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetIdSchemasResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jsonschemas"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.jsonschemas) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.jsonschemas.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.jsonschemas, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdSchemasResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdSchemasResponse) -> Bool {
    if lhs.jsonschemas != rhs.jsonschemas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetIdSchemasResponse.JsonSchema: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Depot_Devtools_Auth_V0_Identity_Admin_GetIdSchemasResponse.protoMessageName + ".JsonSchema"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "content"),
    4: .standard(proto: "created_at"),
    5: .standard(proto: "updated_at"),
    6: .standard(proto: "is_default"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._content) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.isDefault) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if let v = self._content {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._updatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if self.isDefault != false {
      try visitor.visitSingularBoolField(value: self.isDefault, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdSchemasResponse.JsonSchema, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdSchemasResponse.JsonSchema) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs._content != rhs._content {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs._updatedAt != rhs._updatedAt {return false}
    if lhs.isDefault != rhs.isDefault {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetIdSchemaRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetIdSchemaRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdSchemaRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdSchemaRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetIdSchemaResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetIdSchemaResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "content"),
    4: .standard(proto: "created_at"),
    5: .standard(proto: "updated_at"),
    6: .standard(proto: "is_default"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._content) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.isDefault) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if let v = self._content {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._updatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if self.isDefault != false {
      try visitor.visitSingularBoolField(value: self.isDefault, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdSchemaResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetIdSchemaResponse) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs._content != rhs._content {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs._updatedAt != rhs._updatedAt {return false}
    if lhs.isDefault != rhs.isDefault {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetDefaultIdSchemaRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetDefaultIdSchemaRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetDefaultIdSchemaRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetDefaultIdSchemaRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetDefaultIdSchemaResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetDefaultIdSchemaResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "content"),
    4: .standard(proto: "created_at"),
    5: .standard(proto: "updated_at"),
    6: .standard(proto: "is_default"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._content) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.isDefault) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if let v = self._content {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._updatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if self.isDefault != false {
      try visitor.visitSingularBoolField(value: self.isDefault, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetDefaultIdSchemaResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetDefaultIdSchemaResponse) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs._content != rhs._content {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs._updatedAt != rhs._updatedAt {return false}
    if lhs.isDefault != rhs.isDefault {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateIdSchemaRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateIdSchemaRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "content"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._content) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if let v = self._content {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateIdSchemaRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateIdSchemaRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs._content != rhs._content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateIdSchemaResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateIdSchemaResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateIdSchemaResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateIdSchemaResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_MarkDefaultIdSchemaRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MarkDefaultIdSchemaRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_MarkDefaultIdSchemaRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_MarkDefaultIdSchemaRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_MarkDefaultIdSchemaResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MarkDefaultIdSchemaResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_MarkDefaultIdSchemaResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_MarkDefaultIdSchemaResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_DeleteIdSchemaRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteIdSchemaRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_DeleteIdSchemaRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_DeleteIdSchemaRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_DeleteIdSchemaResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteIdSchemaResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_DeleteIdSchemaResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_DeleteIdSchemaResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetEmailsSetupRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetEmailsSetupResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "welcome"),
    2: .standard(proto: "account_verification"),
    3: .standard(proto: "account_recovery"),
    4: .standard(proto: "account_recovered"),
    5: .same(proto: "otp"),
    6: .same(proto: "smtp"),
    7: .standard(proto: "project_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._welcome) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._accountVerification) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._accountRecovery) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._accountRecovered) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._otp) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._smtp) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._welcome {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._accountVerification {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._accountRecovery {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._accountRecovered {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._otp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._smtp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse) -> Bool {
    if lhs._welcome != rhs._welcome {return false}
    if lhs._accountVerification != rhs._accountVerification {return false}
    if lhs._accountRecovery != rhs._accountRecovery {return false}
    if lhs._accountRecovered != rhs._accountRecovered {return false}
    if lhs._otp != rhs._otp {return false}
    if lhs._smtp != rhs._smtp {return false}
    if lhs.projectID != rhs.projectID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailTemplate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.protoMessageName + ".EmailTemplate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "content"),
    4: .same(proto: "subject"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeSingularStringField(value: &self.content) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.subject) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 3)
    }
    if !self.subject.isEmpty {
      try visitor.visitSingularStringField(value: self.subject, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailTemplate, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailTemplate) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.subject != rhs.subject {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailSender: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.protoMessageName + ".EmailSender"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "email_address"),
    2: .standard(proto: "smtp_host"),
    3: .standard(proto: "smtp_port"),
    4: .standard(proto: "smtp_username"),
    5: .standard(proto: "smtp_password"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.emailAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.smtpHost) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.smtpPort) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.smtpUsername) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.smtpPassword) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.emailAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.emailAddress, fieldNumber: 1)
    }
    if !self.smtpHost.isEmpty {
      try visitor.visitSingularStringField(value: self.smtpHost, fieldNumber: 2)
    }
    if self.smtpPort != 0 {
      try visitor.visitSingularUInt32Field(value: self.smtpPort, fieldNumber: 3)
    }
    if !self.smtpUsername.isEmpty {
      try visitor.visitSingularStringField(value: self.smtpUsername, fieldNumber: 4)
    }
    if !self.smtpPassword.isEmpty {
      try visitor.visitSingularStringField(value: self.smtpPassword, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailSender, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetEmailsSetupResponse.EmailSender) -> Bool {
    if lhs.emailAddress != rhs.emailAddress {return false}
    if lhs.smtpHost != rhs.smtpHost {return false}
    if lhs.smtpPort != rhs.smtpPort {return false}
    if lhs.smtpUsername != rhs.smtpUsername {return false}
    if lhs.smtpPassword != rhs.smtpPassword {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateEmailsSetupRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "welcome"),
    2: .standard(proto: "account_verification"),
    3: .standard(proto: "account_recovery"),
    4: .standard(proto: "account_recovered"),
    5: .same(proto: "otp"),
    6: .same(proto: "smtp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._welcome) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._accountVerification) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._accountRecovery) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._accountRecovered) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._otp) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._smtp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._welcome {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._accountVerification {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._accountRecovery {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._accountRecovered {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._otp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._smtp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest) -> Bool {
    if lhs._welcome != rhs._welcome {return false}
    if lhs._accountVerification != rhs._accountVerification {return false}
    if lhs._accountRecovery != rhs._accountRecovery {return false}
    if lhs._accountRecovered != rhs._accountRecovered {return false}
    if lhs._otp != rhs._otp {return false}
    if lhs._smtp != rhs._smtp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailTemplate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.protoMessageName + ".EmailTemplate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "content"),
    2: .same(proto: "subject"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.content) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.subject) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 1)
    }
    if !self.subject.isEmpty {
      try visitor.visitSingularStringField(value: self.subject, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailTemplate, rhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailTemplate) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.subject != rhs.subject {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailSender: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.protoMessageName + ".EmailSender"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "email_address"),
    2: .standard(proto: "smtp_host"),
    3: .standard(proto: "smtp_port"),
    4: .standard(proto: "smtp_username"),
    5: .standard(proto: "smtp_password"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.emailAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.smtpHost) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.smtpPort) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.smtpUsername) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.smtpPassword) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.emailAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.emailAddress, fieldNumber: 1)
    }
    if !self.smtpHost.isEmpty {
      try visitor.visitSingularStringField(value: self.smtpHost, fieldNumber: 2)
    }
    if self.smtpPort != 0 {
      try visitor.visitSingularUInt32Field(value: self.smtpPort, fieldNumber: 3)
    }
    if !self.smtpUsername.isEmpty {
      try visitor.visitSingularStringField(value: self.smtpUsername, fieldNumber: 4)
    }
    if !self.smtpPassword.isEmpty {
      try visitor.visitSingularStringField(value: self.smtpPassword, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailSender, rhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupRequest.EmailSender) -> Bool {
    if lhs.emailAddress != rhs.emailAddress {return false}
    if lhs.smtpHost != rhs.smtpHost {return false}
    if lhs.smtpPort != rhs.smtpPort {return false}
    if lhs.smtpUsername != rhs.smtpUsername {return false}
    if lhs.smtpPassword != rhs.smtpPassword {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateEmailsSetupResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_UpdateEmailsSetupResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetUserBaseStatisticsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetUserBaseStatisticsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "days_before"),
    2: .standard(proto: "lifetime_start_at"),
    3: .standard(proto: "lifetime_end_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.daysBefore) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._lifetimeStartAt) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._lifetimeEndAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.daysBefore != 0 {
      try visitor.visitSingularUInt32Field(value: self.daysBefore, fieldNumber: 1)
    }
    if let v = self._lifetimeStartAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._lifetimeEndAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetUserBaseStatisticsRequest, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetUserBaseStatisticsRequest) -> Bool {
    if lhs.daysBefore != rhs.daysBefore {return false}
    if lhs._lifetimeStartAt != rhs._lifetimeStartAt {return false}
    if lhs._lifetimeEndAt != rhs._lifetimeEndAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Depot_Devtools_Auth_V0_Identity_Admin_GetUserBaseStatisticsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetUserBaseStatisticsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_users"),
    2: .standard(proto: "users_per_day"),
    3: .standard(proto: "sessions_per_day"),
    4: .standard(proto: "total_active_users"),
    5: .standard(proto: "total_lifetime_used"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.totalUsers) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: &self.usersPerDay) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: &self.sessionsPerDay) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.totalActiveUsers) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.totalLifetimeUsed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalUsers != 0 {
      try visitor.visitSingularInt32Field(value: self.totalUsers, fieldNumber: 1)
    }
    if !self.usersPerDay.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: self.usersPerDay, fieldNumber: 2)
    }
    if !self.sessionsPerDay.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: self.sessionsPerDay, fieldNumber: 3)
    }
    if self.totalActiveUsers != 0 {
      try visitor.visitSingularInt32Field(value: self.totalActiveUsers, fieldNumber: 4)
    }
    if self.totalLifetimeUsed != 0 {
      try visitor.visitSingularDoubleField(value: self.totalLifetimeUsed, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Depot_Devtools_Auth_V0_Identity_Admin_GetUserBaseStatisticsResponse, rhs: Depot_Devtools_Auth_V0_Identity_Admin_GetUserBaseStatisticsResponse) -> Bool {
    if lhs.totalUsers != rhs.totalUsers {return false}
    if lhs.usersPerDay != rhs.usersPerDay {return false}
    if lhs.sessionsPerDay != rhs.sessionsPerDay {return false}
    if lhs.totalActiveUsers != rhs.totalActiveUsers {return false}
    if lhs.totalLifetimeUsed != rhs.totalLifetimeUsed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
